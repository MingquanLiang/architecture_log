# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DataCachingInformation',
            fields=[
                ('id', models.AutoField(serialize=False, primary_key=True, verbose_name='ID', auto_created=True)),
                ('project_name', models.CharField(choices=[('CP1_TEST', 'CP1_TEST'), ('CP2_TEST', 'CP2_TEST'), ('CP3_TEST', 'CP3_TEST')], verbose_name='Project Name', max_length=32)),
                ('project_id', models.CharField(choices=[('1D', '1D'), ('2D', '2D'), ('3D', '3D')], verbose_name='Project ID', max_length=32)),
                ('cpu_type', models.CharField(choices=[('CPU 1.0', 'CPU 1.0'), ('CPU 1.1', 'CPU 1.1')], default='CPU 1.0', verbose_name='CPU Type', max_length=32)),
                ('reference_link', models.URLField(default='http://10.100.8.185:8090', verbose_name='Reference Link (Confluence)')),
                ('neck_cpu', models.BooleanField(verbose_name='CPU Neck')),
                ('neck_io', models.BooleanField(verbose_name='IO Neck')),
                ('neck_memory', models.BooleanField(verbose_name='Memory Neck')),
                ('neck_net', models.BooleanField(verbose_name='Net Neck')),
                ('test_application', models.CharField(default='Data Caching', editable=False, max_length=32)),
                ('version', models.CharField(default='0.1', verbose_name='Application Version', max_length=10)),
                ('record_result_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Record Result Time')),
                ('result_max_rps', models.FloatField(verbose_name='Result - Max RPS')),
                ('data_scale', models.PositiveSmallIntegerField(verbose_name='Data Scale')),
                ('number_works', models.PositiveSmallIntegerField(verbose_name='Work Number')),
                ('number_connections', models.PositiveSmallIntegerField(verbose_name='Connection Number')),
                ('number_threads', models.PositiveSmallIntegerField(verbose_name='Thread Number')),
                ('network_bandwidth', models.PositiveSmallIntegerField(verbose_name='Network Bandwidth (Mbps)')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataCachingMachine',
            fields=[
                ('id', models.AutoField(serialize=False, primary_key=True, verbose_name='ID', auto_created=True)),
                ('machine_side', models.CharField(choices=[('server_side', 'As a Server'), ('client_side', 'As a Client')], default='server_side', verbose_name='Server/Client', max_length=32)),
                ('machine_name', models.CharField(choices=[('Habonaro', 'Habonaro'), ('Palmetto', 'Palmetto'), ('S812L', 'S812L'), ('S822L', 'S822L'), ('X86_E5', 'X86 E5 Series')], default='Habonaro', verbose_name='Machine Name', max_length=32)),
                ('architecture_type', models.CharField(choices=[('x86', 'x86'), ('powerpc', 'powerpc'), ('arm64', 'arm64'), ('mips', 'mips')], default='powerpc', verbose_name='Architecture', max_length=32)),
                ('byte_order', models.CharField(choices=[('litter_endian', 'Litter Endian'), ('big_endian', 'Big Endian')], default='big_endian', verbose_name='Litter or Big endian', max_length=32)),
                ('cpu_frequency', models.FloatField(verbose_name='CPU Clock Rate (GHZ)')),
                ('l1_instruction', models.PositiveSmallIntegerField(verbose_name='L1 I-Cache (KB)')),
                ('l1_data', models.PositiveSmallIntegerField(verbose_name='L1 D-Cache (KB)')),
                ('l2', models.PositiveSmallIntegerField(verbose_name='L2 Cache (KB)')),
                ('l3', models.PositiveIntegerField(default=0, verbose_name='L3 Cache (KB)', blank=True)),
                ('l4', models.PositiveIntegerField(default=0, verbose_name='L4 Cache (KB)', blank=True)),
                ('memory', models.PositiveIntegerField(verbose_name='Memory (GB)')),
                ('os_type', models.CharField(choices=[('Ubuntu 14.04.1', 'Ubuntu 14.04.1'), ('Ubuntu 14.04.2', 'Ubuntu 14.04.2'), ('Ubuntu 14.04.3', 'Ubuntu 14.04.3'), ('Ubuntu 14.04.10', 'Ubuntu 14.04.10'), ('RHEL 7.0', 'RHEL 7.0'), ('CentOS 6.6', 'CentOS 6.6'), ('CentOS 6.7', 'CentOS 6.7'), ('CentOS 7.0', 'CentOS 7.0'), ('Fedora 22', 'Fedora 22'), ('PowerKVM 2.1.1', 'PowerKVM 2.1.1')], default='Ubuntu 14.04.2', verbose_name='Operation System', max_length=64)),
                ('kernel_version', models.CharField(choices=[('2.6.32-573.7.1.e16.centos.plus.x86_64', '2.6.32-573.7.1.e16.centos.plus.x86_64'), ('3.10.0-pagecoloring-cpufreq+', '3.10.0-pagecoloring-cpufreq+'), ('3.10.53-2025.1.pkvm2_1_1.54.ppc64', '3.10.53-2025.1.pkvm2_1_1.54.ppc64'), ('3.10.89-2045.1.pkvm2_1_1.74.ppc64', '3.10.89-2045.1.pkvm2_1_1.74.ppc64'), ('3.13.0-32-generic', '3.13.0-32-generic'), ('3.16.0-23-generic', '3.16.0-23-generic'), ('3.16.0-30-generic', '3.16.0-30-generic'), ('3.16.0-51-generic', '3.16.0-51-generic'), ('3.19.0-25-generic', '3.19.0-25-generic'), ('4.0.4-301.fc22.ppc64', '4.0.4-301.fc22.ppc64'), ('4.1.0-pagecoloring', '4.1.0-pagecoloring')], default='3.16.0-30-generic', verbose_name='Kernel Version', max_length=64)),
                ('dependence_information', models.TextField(max_length=1024, verbose_name='Dependency Instruction', blank=True)),
                ('last_modify_time', models.DateTimeField(auto_now=True, verbose_name='Last Modified Time')),
                ('app_information', models.ForeignKey(to='performance.DataCachingInformation', verbose_name='DataCaching Information')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LmbenchInformation',
            fields=[
                ('id', models.AutoField(serialize=False, primary_key=True, verbose_name='ID', auto_created=True)),
                ('project_name', models.CharField(choices=[('CP1_TEST', 'CP1_TEST'), ('CP2_TEST', 'CP2_TEST'), ('CP3_TEST', 'CP3_TEST')], verbose_name='Project Name', max_length=32)),
                ('project_id', models.CharField(choices=[('1D', '1D'), ('2D', '2D'), ('3D', '3D')], verbose_name='Project ID', max_length=32)),
                ('cpu_type', models.CharField(choices=[('CPU 1.0', 'CPU 1.0'), ('CPU 1.1', 'CPU 1.1')], default='CPU 1.0', verbose_name='CPU Type', max_length=32)),
                ('reference_link', models.URLField(default='http://10.100.8.185:8090', verbose_name='Reference Link (Confluence)')),
                ('neck_cpu', models.BooleanField(verbose_name='CPU Neck')),
                ('neck_io', models.BooleanField(verbose_name='IO Neck')),
                ('neck_memory', models.BooleanField(verbose_name='Memory Neck')),
                ('neck_net', models.BooleanField(verbose_name='Net Neck')),
                ('test_application', models.CharField(default='Lmbench', editable=False, max_length=32)),
                ('version', models.CharField(default='0.1', verbose_name='Application Version', max_length=10)),
                ('record_result_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Record Result Time')),
                ('result_time', models.FloatField(verbose_name='Result - Time')),
                ('app_name', models.CharField(default='bw_mem', verbose_name='app name', max_length=256)),
                ('problem_size', models.CharField(verbose_name='Problem Size', max_length=256)),
                ('thread_number', models.PositiveSmallIntegerField(verbose_name='Thread Number')),
                ('node', models.CharField(verbose_name='Node', max_length=256)),
                ('phycpu', models.CharField(verbose_name='Physical CPU', max_length=256)),
                ('stride_size', models.PositiveIntegerField(verbose_name='Stride Size (Byte)')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LmbenchMachine',
            fields=[
                ('id', models.AutoField(serialize=False, primary_key=True, verbose_name='ID', auto_created=True)),
                ('machine_side', models.CharField(choices=[('server_side', 'As a Server'), ('client_side', 'As a Client')], default='server_side', verbose_name='Server/Client', max_length=32)),
                ('machine_name', models.CharField(choices=[('Habonaro', 'Habonaro'), ('Palmetto', 'Palmetto'), ('S812L', 'S812L'), ('S822L', 'S822L'), ('X86_E5', 'X86 E5 Series')], default='Habonaro', verbose_name='Machine Name', max_length=32)),
                ('architecture_type', models.CharField(choices=[('x86', 'x86'), ('powerpc', 'powerpc'), ('arm64', 'arm64'), ('mips', 'mips')], default='powerpc', verbose_name='Architecture', max_length=32)),
                ('byte_order', models.CharField(choices=[('litter_endian', 'Litter Endian'), ('big_endian', 'Big Endian')], default='big_endian', verbose_name='Litter or Big endian', max_length=32)),
                ('cpu_frequency', models.FloatField(verbose_name='CPU Clock Rate (GHZ)')),
                ('l1_instruction', models.PositiveSmallIntegerField(verbose_name='L1 I-Cache (KB)')),
                ('l1_data', models.PositiveSmallIntegerField(verbose_name='L1 D-Cache (KB)')),
                ('l2', models.PositiveSmallIntegerField(verbose_name='L2 Cache (KB)')),
                ('l3', models.PositiveIntegerField(default=0, verbose_name='L3 Cache (KB)', blank=True)),
                ('l4', models.PositiveIntegerField(default=0, verbose_name='L4 Cache (KB)', blank=True)),
                ('memory', models.PositiveIntegerField(verbose_name='Memory (GB)')),
                ('os_type', models.CharField(choices=[('Ubuntu 14.04.1', 'Ubuntu 14.04.1'), ('Ubuntu 14.04.2', 'Ubuntu 14.04.2'), ('Ubuntu 14.04.3', 'Ubuntu 14.04.3'), ('Ubuntu 14.04.10', 'Ubuntu 14.04.10'), ('RHEL 7.0', 'RHEL 7.0'), ('CentOS 6.6', 'CentOS 6.6'), ('CentOS 6.7', 'CentOS 6.7'), ('CentOS 7.0', 'CentOS 7.0'), ('Fedora 22', 'Fedora 22'), ('PowerKVM 2.1.1', 'PowerKVM 2.1.1')], default='Ubuntu 14.04.2', verbose_name='Operation System', max_length=64)),
                ('kernel_version', models.CharField(choices=[('2.6.32-573.7.1.e16.centos.plus.x86_64', '2.6.32-573.7.1.e16.centos.plus.x86_64'), ('3.10.0-pagecoloring-cpufreq+', '3.10.0-pagecoloring-cpufreq+'), ('3.10.53-2025.1.pkvm2_1_1.54.ppc64', '3.10.53-2025.1.pkvm2_1_1.54.ppc64'), ('3.10.89-2045.1.pkvm2_1_1.74.ppc64', '3.10.89-2045.1.pkvm2_1_1.74.ppc64'), ('3.13.0-32-generic', '3.13.0-32-generic'), ('3.16.0-23-generic', '3.16.0-23-generic'), ('3.16.0-30-generic', '3.16.0-30-generic'), ('3.16.0-51-generic', '3.16.0-51-generic'), ('3.19.0-25-generic', '3.19.0-25-generic'), ('4.0.4-301.fc22.ppc64', '4.0.4-301.fc22.ppc64'), ('4.1.0-pagecoloring', '4.1.0-pagecoloring')], default='3.16.0-30-generic', verbose_name='Kernel Version', max_length=64)),
                ('dependence_information', models.TextField(max_length=1024, verbose_name='Dependency Instruction', blank=True)),
                ('last_modify_time', models.DateTimeField(auto_now=True, verbose_name='Last Modified Time')),
                ('app_information', models.ForeignKey(to='performance.LmbenchInformation', verbose_name='Lmbench Information')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ParsecInformation',
            fields=[
                ('id', models.AutoField(serialize=False, primary_key=True, verbose_name='ID', auto_created=True)),
                ('project_name', models.CharField(choices=[('CP1_TEST', 'CP1_TEST'), ('CP2_TEST', 'CP2_TEST'), ('CP3_TEST', 'CP3_TEST')], verbose_name='Project Name', max_length=32)),
                ('project_id', models.CharField(choices=[('1D', '1D'), ('2D', '2D'), ('3D', '3D')], verbose_name='Project ID', max_length=32)),
                ('cpu_type', models.CharField(choices=[('CPU 1.0', 'CPU 1.0'), ('CPU 1.1', 'CPU 1.1')], default='CPU 1.0', verbose_name='CPU Type', max_length=32)),
                ('reference_link', models.URLField(default='http://10.100.8.185:8090', verbose_name='Reference Link (Confluence)')),
                ('neck_cpu', models.BooleanField(verbose_name='CPU Neck')),
                ('neck_io', models.BooleanField(verbose_name='IO Neck')),
                ('neck_memory', models.BooleanField(verbose_name='Memory Neck')),
                ('neck_net', models.BooleanField(verbose_name='Net Neck')),
                ('test_application', models.CharField(default='Parsec', editable=False, max_length=32)),
                ('version', models.CharField(default='0.1', verbose_name='Application Version', max_length=10)),
                ('record_result_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Record Result Time')),
                ('result_time', models.FloatField(verbose_name='Result - Time(s)')),
                ('app_name', models.CharField(verbose_name='app name', max_length=256)),
                ('input_set', models.CharField(verbose_name='Input Set', max_length=256)),
                ('thread_number', models.PositiveSmallIntegerField(verbose_name='Thread Number')),
                ('smt_number', models.PositiveSmallIntegerField(verbose_name='SMT')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ParsecMachine',
            fields=[
                ('id', models.AutoField(serialize=False, primary_key=True, verbose_name='ID', auto_created=True)),
                ('machine_side', models.CharField(choices=[('server_side', 'As a Server'), ('client_side', 'As a Client')], default='server_side', verbose_name='Server/Client', max_length=32)),
                ('machine_name', models.CharField(choices=[('Habonaro', 'Habonaro'), ('Palmetto', 'Palmetto'), ('S812L', 'S812L'), ('S822L', 'S822L'), ('X86_E5', 'X86 E5 Series')], default='Habonaro', verbose_name='Machine Name', max_length=32)),
                ('architecture_type', models.CharField(choices=[('x86', 'x86'), ('powerpc', 'powerpc'), ('arm64', 'arm64'), ('mips', 'mips')], default='powerpc', verbose_name='Architecture', max_length=32)),
                ('byte_order', models.CharField(choices=[('litter_endian', 'Litter Endian'), ('big_endian', 'Big Endian')], default='big_endian', verbose_name='Litter or Big endian', max_length=32)),
                ('cpu_frequency', models.FloatField(verbose_name='CPU Clock Rate (GHZ)')),
                ('l1_instruction', models.PositiveSmallIntegerField(verbose_name='L1 I-Cache (KB)')),
                ('l1_data', models.PositiveSmallIntegerField(verbose_name='L1 D-Cache (KB)')),
                ('l2', models.PositiveSmallIntegerField(verbose_name='L2 Cache (KB)')),
                ('l3', models.PositiveIntegerField(default=0, verbose_name='L3 Cache (KB)', blank=True)),
                ('l4', models.PositiveIntegerField(default=0, verbose_name='L4 Cache (KB)', blank=True)),
                ('memory', models.PositiveIntegerField(verbose_name='Memory (GB)')),
                ('os_type', models.CharField(choices=[('Ubuntu 14.04.1', 'Ubuntu 14.04.1'), ('Ubuntu 14.04.2', 'Ubuntu 14.04.2'), ('Ubuntu 14.04.3', 'Ubuntu 14.04.3'), ('Ubuntu 14.04.10', 'Ubuntu 14.04.10'), ('RHEL 7.0', 'RHEL 7.0'), ('CentOS 6.6', 'CentOS 6.6'), ('CentOS 6.7', 'CentOS 6.7'), ('CentOS 7.0', 'CentOS 7.0'), ('Fedora 22', 'Fedora 22'), ('PowerKVM 2.1.1', 'PowerKVM 2.1.1')], default='Ubuntu 14.04.2', verbose_name='Operation System', max_length=64)),
                ('kernel_version', models.CharField(choices=[('2.6.32-573.7.1.e16.centos.plus.x86_64', '2.6.32-573.7.1.e16.centos.plus.x86_64'), ('3.10.0-pagecoloring-cpufreq+', '3.10.0-pagecoloring-cpufreq+'), ('3.10.53-2025.1.pkvm2_1_1.54.ppc64', '3.10.53-2025.1.pkvm2_1_1.54.ppc64'), ('3.10.89-2045.1.pkvm2_1_1.74.ppc64', '3.10.89-2045.1.pkvm2_1_1.74.ppc64'), ('3.13.0-32-generic', '3.13.0-32-generic'), ('3.16.0-23-generic', '3.16.0-23-generic'), ('3.16.0-30-generic', '3.16.0-30-generic'), ('3.16.0-51-generic', '3.16.0-51-generic'), ('3.19.0-25-generic', '3.19.0-25-generic'), ('4.0.4-301.fc22.ppc64', '4.0.4-301.fc22.ppc64'), ('4.1.0-pagecoloring', '4.1.0-pagecoloring')], default='3.16.0-30-generic', verbose_name='Kernel Version', max_length=64)),
                ('dependence_information', models.TextField(max_length=1024, verbose_name='Dependency Instruction', blank=True)),
                ('last_modify_time', models.DateTimeField(auto_now=True, verbose_name='Last Modified Time')),
                ('app_information', models.ForeignKey(to='performance.ParsecInformation', verbose_name='Parsec Information')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SiriusSuitInformation',
            fields=[
                ('id', models.AutoField(serialize=False, primary_key=True, verbose_name='ID', auto_created=True)),
                ('project_name', models.CharField(choices=[('CP1_TEST', 'CP1_TEST'), ('CP2_TEST', 'CP2_TEST'), ('CP3_TEST', 'CP3_TEST')], verbose_name='Project Name', max_length=32)),
                ('project_id', models.CharField(choices=[('1D', '1D'), ('2D', '2D'), ('3D', '3D')], verbose_name='Project ID', max_length=32)),
                ('cpu_type', models.CharField(choices=[('CPU 1.0', 'CPU 1.0'), ('CPU 1.1', 'CPU 1.1')], default='CPU 1.0', verbose_name='CPU Type', max_length=32)),
                ('reference_link', models.URLField(default='http://10.100.8.185:8090', verbose_name='Reference Link (Confluence)')),
                ('neck_cpu', models.BooleanField(verbose_name='CPU Neck')),
                ('neck_io', models.BooleanField(verbose_name='IO Neck')),
                ('neck_memory', models.BooleanField(verbose_name='Memory Neck')),
                ('neck_net', models.BooleanField(verbose_name='Net Neck')),
                ('test_application', models.CharField(default='Sirius-suit', editable=False, max_length=32)),
                ('version', models.CharField(default='0.1', verbose_name='Application Version', max_length=10)),
                ('record_result_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Record Result Time')),
                ('result_run_time', models.FloatField(verbose_name='Result - RUN_TIME(ms)')),
                ('result_passed', models.BooleanField(verbose_name='Result - PASSED')),
                ('result_warnings', models.BooleanField(verbose_name='Result - WARNINGS')),
                ('result_errors', models.BooleanField(verbose_name='Result - ERRORS')),
                ('app_name', models.CharField(verbose_name='app name', max_length=256)),
                ('pthread_num', models.PositiveSmallIntegerField(verbose_name='Pthread Number')),
                ('dataset_size', models.FloatField(verbose_name='Dataset Size (GB)')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SiriusSuitMachine',
            fields=[
                ('id', models.AutoField(serialize=False, primary_key=True, verbose_name='ID', auto_created=True)),
                ('machine_side', models.CharField(choices=[('server_side', 'As a Server'), ('client_side', 'As a Client')], default='server_side', verbose_name='Server/Client', max_length=32)),
                ('machine_name', models.CharField(choices=[('Habonaro', 'Habonaro'), ('Palmetto', 'Palmetto'), ('S812L', 'S812L'), ('S822L', 'S822L'), ('X86_E5', 'X86 E5 Series')], default='Habonaro', verbose_name='Machine Name', max_length=32)),
                ('architecture_type', models.CharField(choices=[('x86', 'x86'), ('powerpc', 'powerpc'), ('arm64', 'arm64'), ('mips', 'mips')], default='powerpc', verbose_name='Architecture', max_length=32)),
                ('byte_order', models.CharField(choices=[('litter_endian', 'Litter Endian'), ('big_endian', 'Big Endian')], default='big_endian', verbose_name='Litter or Big endian', max_length=32)),
                ('cpu_frequency', models.FloatField(verbose_name='CPU Clock Rate (GHZ)')),
                ('l1_instruction', models.PositiveSmallIntegerField(verbose_name='L1 I-Cache (KB)')),
                ('l1_data', models.PositiveSmallIntegerField(verbose_name='L1 D-Cache (KB)')),
                ('l2', models.PositiveSmallIntegerField(verbose_name='L2 Cache (KB)')),
                ('l3', models.PositiveIntegerField(default=0, verbose_name='L3 Cache (KB)', blank=True)),
                ('l4', models.PositiveIntegerField(default=0, verbose_name='L4 Cache (KB)', blank=True)),
                ('memory', models.PositiveIntegerField(verbose_name='Memory (GB)')),
                ('os_type', models.CharField(choices=[('Ubuntu 14.04.1', 'Ubuntu 14.04.1'), ('Ubuntu 14.04.2', 'Ubuntu 14.04.2'), ('Ubuntu 14.04.3', 'Ubuntu 14.04.3'), ('Ubuntu 14.04.10', 'Ubuntu 14.04.10'), ('RHEL 7.0', 'RHEL 7.0'), ('CentOS 6.6', 'CentOS 6.6'), ('CentOS 6.7', 'CentOS 6.7'), ('CentOS 7.0', 'CentOS 7.0'), ('Fedora 22', 'Fedora 22'), ('PowerKVM 2.1.1', 'PowerKVM 2.1.1')], default='Ubuntu 14.04.2', verbose_name='Operation System', max_length=64)),
                ('kernel_version', models.CharField(choices=[('2.6.32-573.7.1.e16.centos.plus.x86_64', '2.6.32-573.7.1.e16.centos.plus.x86_64'), ('3.10.0-pagecoloring-cpufreq+', '3.10.0-pagecoloring-cpufreq+'), ('3.10.53-2025.1.pkvm2_1_1.54.ppc64', '3.10.53-2025.1.pkvm2_1_1.54.ppc64'), ('3.10.89-2045.1.pkvm2_1_1.74.ppc64', '3.10.89-2045.1.pkvm2_1_1.74.ppc64'), ('3.13.0-32-generic', '3.13.0-32-generic'), ('3.16.0-23-generic', '3.16.0-23-generic'), ('3.16.0-30-generic', '3.16.0-30-generic'), ('3.16.0-51-generic', '3.16.0-51-generic'), ('3.19.0-25-generic', '3.19.0-25-generic'), ('4.0.4-301.fc22.ppc64', '4.0.4-301.fc22.ppc64'), ('4.1.0-pagecoloring', '4.1.0-pagecoloring')], default='3.16.0-30-generic', verbose_name='Kernel Version', max_length=64)),
                ('dependence_information', models.TextField(max_length=1024, verbose_name='Dependency Instruction', blank=True)),
                ('last_modify_time', models.DateTimeField(auto_now=True, verbose_name='Last Modified Time')),
                ('app_information', models.ForeignKey(to='performance.SiriusSuitInformation', verbose_name='Sirius-suit Information')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SparkTerasortInformation',
            fields=[
                ('id', models.AutoField(serialize=False, primary_key=True, verbose_name='ID', auto_created=True)),
                ('project_name', models.CharField(choices=[('CP1_TEST', 'CP1_TEST'), ('CP2_TEST', 'CP2_TEST'), ('CP3_TEST', 'CP3_TEST')], verbose_name='Project Name', max_length=32)),
                ('project_id', models.CharField(choices=[('1D', '1D'), ('2D', '2D'), ('3D', '3D')], verbose_name='Project ID', max_length=32)),
                ('cpu_type', models.CharField(choices=[('CPU 1.0', 'CPU 1.0'), ('CPU 1.1', 'CPU 1.1')], default='CPU 1.0', verbose_name='CPU Type', max_length=32)),
                ('reference_link', models.URLField(default='http://10.100.8.185:8090', verbose_name='Reference Link (Confluence)')),
                ('neck_cpu', models.BooleanField(verbose_name='CPU Neck')),
                ('neck_io', models.BooleanField(verbose_name='IO Neck')),
                ('neck_memory', models.BooleanField(verbose_name='Memory Neck')),
                ('neck_net', models.BooleanField(verbose_name='Net Neck')),
                ('test_application', models.CharField(default='Spark Terasort', editable=False, max_length=32)),
                ('version', models.CharField(default='0.1', verbose_name='Application Version', max_length=10)),
                ('record_result_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Record Result Time')),
                ('result_time', models.FloatField(verbose_name='Result - Time(s)')),
                ('data_size', models.FloatField(verbose_name='Data Size (GB)')),
                ('parition_size', models.PositiveSmallIntegerField(verbose_name='Partition Size')),
                ('processor_number', models.PositiveSmallIntegerField(verbose_name='Processor Number')),
                ('workers', models.PositiveIntegerField(verbose_name='Workers')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SparkTerasortMachine',
            fields=[
                ('id', models.AutoField(serialize=False, primary_key=True, verbose_name='ID', auto_created=True)),
                ('machine_side', models.CharField(choices=[('server_side', 'As a Server'), ('client_side', 'As a Client')], default='server_side', verbose_name='Server/Client', max_length=32)),
                ('machine_name', models.CharField(choices=[('Habonaro', 'Habonaro'), ('Palmetto', 'Palmetto'), ('S812L', 'S812L'), ('S822L', 'S822L'), ('X86_E5', 'X86 E5 Series')], default='Habonaro', verbose_name='Machine Name', max_length=32)),
                ('architecture_type', models.CharField(choices=[('x86', 'x86'), ('powerpc', 'powerpc'), ('arm64', 'arm64'), ('mips', 'mips')], default='powerpc', verbose_name='Architecture', max_length=32)),
                ('byte_order', models.CharField(choices=[('litter_endian', 'Litter Endian'), ('big_endian', 'Big Endian')], default='big_endian', verbose_name='Litter or Big endian', max_length=32)),
                ('cpu_frequency', models.FloatField(verbose_name='CPU Clock Rate (GHZ)')),
                ('l1_instruction', models.PositiveSmallIntegerField(verbose_name='L1 I-Cache (KB)')),
                ('l1_data', models.PositiveSmallIntegerField(verbose_name='L1 D-Cache (KB)')),
                ('l2', models.PositiveSmallIntegerField(verbose_name='L2 Cache (KB)')),
                ('l3', models.PositiveIntegerField(default=0, verbose_name='L3 Cache (KB)', blank=True)),
                ('l4', models.PositiveIntegerField(default=0, verbose_name='L4 Cache (KB)', blank=True)),
                ('memory', models.PositiveIntegerField(verbose_name='Memory (GB)')),
                ('os_type', models.CharField(choices=[('Ubuntu 14.04.1', 'Ubuntu 14.04.1'), ('Ubuntu 14.04.2', 'Ubuntu 14.04.2'), ('Ubuntu 14.04.3', 'Ubuntu 14.04.3'), ('Ubuntu 14.04.10', 'Ubuntu 14.04.10'), ('RHEL 7.0', 'RHEL 7.0'), ('CentOS 6.6', 'CentOS 6.6'), ('CentOS 6.7', 'CentOS 6.7'), ('CentOS 7.0', 'CentOS 7.0'), ('Fedora 22', 'Fedora 22'), ('PowerKVM 2.1.1', 'PowerKVM 2.1.1')], default='Ubuntu 14.04.2', verbose_name='Operation System', max_length=64)),
                ('kernel_version', models.CharField(choices=[('2.6.32-573.7.1.e16.centos.plus.x86_64', '2.6.32-573.7.1.e16.centos.plus.x86_64'), ('3.10.0-pagecoloring-cpufreq+', '3.10.0-pagecoloring-cpufreq+'), ('3.10.53-2025.1.pkvm2_1_1.54.ppc64', '3.10.53-2025.1.pkvm2_1_1.54.ppc64'), ('3.10.89-2045.1.pkvm2_1_1.74.ppc64', '3.10.89-2045.1.pkvm2_1_1.74.ppc64'), ('3.13.0-32-generic', '3.13.0-32-generic'), ('3.16.0-23-generic', '3.16.0-23-generic'), ('3.16.0-30-generic', '3.16.0-30-generic'), ('3.16.0-51-generic', '3.16.0-51-generic'), ('3.19.0-25-generic', '3.19.0-25-generic'), ('4.0.4-301.fc22.ppc64', '4.0.4-301.fc22.ppc64'), ('4.1.0-pagecoloring', '4.1.0-pagecoloring')], default='3.16.0-30-generic', verbose_name='Kernel Version', max_length=64)),
                ('dependence_information', models.TextField(max_length=1024, verbose_name='Dependency Instruction', blank=True)),
                ('last_modify_time', models.DateTimeField(auto_now=True, verbose_name='Last Modified Time')),
                ('app_information', models.ForeignKey(to='performance.SparkTerasortInformation', verbose_name='SparkTerasort Information')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpecCPUInformation',
            fields=[
                ('id', models.AutoField(serialize=False, primary_key=True, verbose_name='ID', auto_created=True)),
                ('project_name', models.CharField(choices=[('CP1_TEST', 'CP1_TEST'), ('CP2_TEST', 'CP2_TEST'), ('CP3_TEST', 'CP3_TEST')], verbose_name='Project Name', max_length=32)),
                ('project_id', models.CharField(choices=[('1D', '1D'), ('2D', '2D'), ('3D', '3D')], verbose_name='Project ID', max_length=32)),
                ('cpu_type', models.CharField(choices=[('CPU 1.0', 'CPU 1.0'), ('CPU 1.1', 'CPU 1.1')], default='CPU 1.0', verbose_name='CPU Type', max_length=32)),
                ('reference_link', models.URLField(default='http://10.100.8.185:8090', verbose_name='Reference Link (Confluence)')),
                ('neck_cpu', models.BooleanField(verbose_name='CPU Neck')),
                ('neck_io', models.BooleanField(verbose_name='IO Neck')),
                ('neck_memory', models.BooleanField(verbose_name='Memory Neck')),
                ('neck_net', models.BooleanField(verbose_name='Net Neck')),
                ('test_application', models.CharField(default='SPEC CPU', editable=False, max_length=32)),
                ('version', models.CharField(default='0.1', verbose_name='Application Version', max_length=10)),
                ('record_result_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Record Result Time')),
                ('result_int_rate_ratio', models.FloatField(verbose_name="Result - INT Rate Ratio's")),
                ('result_fp_rate_ratio', models.FloatField(verbose_name="Result - FP Rate Ratio's")),
                ('benchmarks', models.CharField(verbose_name='Benchmarks', max_length=256)),
                ('copies', models.PositiveSmallIntegerField(verbose_name='Copies')),
                ('smt_number', models.PositiveSmallIntegerField(verbose_name='SMT')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpecCPUMachine',
            fields=[
                ('id', models.AutoField(serialize=False, primary_key=True, verbose_name='ID', auto_created=True)),
                ('machine_side', models.CharField(choices=[('server_side', 'As a Server'), ('client_side', 'As a Client')], default='server_side', verbose_name='Server/Client', max_length=32)),
                ('machine_name', models.CharField(choices=[('Habonaro', 'Habonaro'), ('Palmetto', 'Palmetto'), ('S812L', 'S812L'), ('S822L', 'S822L'), ('X86_E5', 'X86 E5 Series')], default='Habonaro', verbose_name='Machine Name', max_length=32)),
                ('architecture_type', models.CharField(choices=[('x86', 'x86'), ('powerpc', 'powerpc'), ('arm64', 'arm64'), ('mips', 'mips')], default='powerpc', verbose_name='Architecture', max_length=32)),
                ('byte_order', models.CharField(choices=[('litter_endian', 'Litter Endian'), ('big_endian', 'Big Endian')], default='big_endian', verbose_name='Litter or Big endian', max_length=32)),
                ('cpu_frequency', models.FloatField(verbose_name='CPU Clock Rate (GHZ)')),
                ('l1_instruction', models.PositiveSmallIntegerField(verbose_name='L1 I-Cache (KB)')),
                ('l1_data', models.PositiveSmallIntegerField(verbose_name='L1 D-Cache (KB)')),
                ('l2', models.PositiveSmallIntegerField(verbose_name='L2 Cache (KB)')),
                ('l3', models.PositiveIntegerField(default=0, verbose_name='L3 Cache (KB)', blank=True)),
                ('l4', models.PositiveIntegerField(default=0, verbose_name='L4 Cache (KB)', blank=True)),
                ('memory', models.PositiveIntegerField(verbose_name='Memory (GB)')),
                ('os_type', models.CharField(choices=[('Ubuntu 14.04.1', 'Ubuntu 14.04.1'), ('Ubuntu 14.04.2', 'Ubuntu 14.04.2'), ('Ubuntu 14.04.3', 'Ubuntu 14.04.3'), ('Ubuntu 14.04.10', 'Ubuntu 14.04.10'), ('RHEL 7.0', 'RHEL 7.0'), ('CentOS 6.6', 'CentOS 6.6'), ('CentOS 6.7', 'CentOS 6.7'), ('CentOS 7.0', 'CentOS 7.0'), ('Fedora 22', 'Fedora 22'), ('PowerKVM 2.1.1', 'PowerKVM 2.1.1')], default='Ubuntu 14.04.2', verbose_name='Operation System', max_length=64)),
                ('kernel_version', models.CharField(choices=[('2.6.32-573.7.1.e16.centos.plus.x86_64', '2.6.32-573.7.1.e16.centos.plus.x86_64'), ('3.10.0-pagecoloring-cpufreq+', '3.10.0-pagecoloring-cpufreq+'), ('3.10.53-2025.1.pkvm2_1_1.54.ppc64', '3.10.53-2025.1.pkvm2_1_1.54.ppc64'), ('3.10.89-2045.1.pkvm2_1_1.74.ppc64', '3.10.89-2045.1.pkvm2_1_1.74.ppc64'), ('3.13.0-32-generic', '3.13.0-32-generic'), ('3.16.0-23-generic', '3.16.0-23-generic'), ('3.16.0-30-generic', '3.16.0-30-generic'), ('3.16.0-51-generic', '3.16.0-51-generic'), ('3.19.0-25-generic', '3.19.0-25-generic'), ('4.0.4-301.fc22.ppc64', '4.0.4-301.fc22.ppc64'), ('4.1.0-pagecoloring', '4.1.0-pagecoloring')], default='3.16.0-30-generic', verbose_name='Kernel Version', max_length=64)),
                ('dependence_information', models.TextField(max_length=1024, verbose_name='Dependency Instruction', blank=True)),
                ('last_modify_time', models.DateTimeField(auto_now=True, verbose_name='Last Modified Time')),
                ('threads_per_core', models.PositiveSmallIntegerField(verbose_name='Thread(s) Per Core')),
                ('cores_per_socket', models.PositiveSmallIntegerField(verbose_name='Core(s) Per Socket')),
                ('socket_number', models.PositiveSmallIntegerField(verbose_name='Socket(s)')),
                ('numa_nodes', models.PositiveSmallIntegerField(verbose_name='NUMA Node(s)')),
                ('cpu_number', models.PositiveSmallIntegerField(verbose_name='CPU(s)')),
                ('app_information', models.ForeignKey(to='performance.SpecCPUInformation', verbose_name='SPEC CPU Information')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpecjbbInformation',
            fields=[
                ('id', models.AutoField(serialize=False, primary_key=True, verbose_name='ID', auto_created=True)),
                ('project_name', models.CharField(choices=[('CP1_TEST', 'CP1_TEST'), ('CP2_TEST', 'CP2_TEST'), ('CP3_TEST', 'CP3_TEST')], verbose_name='Project Name', max_length=32)),
                ('project_id', models.CharField(choices=[('1D', '1D'), ('2D', '2D'), ('3D', '3D')], verbose_name='Project ID', max_length=32)),
                ('cpu_type', models.CharField(choices=[('CPU 1.0', 'CPU 1.0'), ('CPU 1.1', 'CPU 1.1')], default='CPU 1.0', verbose_name='CPU Type', max_length=32)),
                ('reference_link', models.URLField(default='http://10.100.8.185:8090', verbose_name='Reference Link (Confluence)')),
                ('neck_cpu', models.BooleanField(verbose_name='CPU Neck')),
                ('neck_io', models.BooleanField(verbose_name='IO Neck')),
                ('neck_memory', models.BooleanField(verbose_name='Memory Neck')),
                ('neck_net', models.BooleanField(verbose_name='Net Neck')),
                ('test_application', models.CharField(default='Spec jbb', editable=False, max_length=32)),
                ('version', models.CharField(default='2005', verbose_name='Application Version', max_length=10)),
                ('record_result_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Record Result Time')),
                ('result_bops', models.FloatField(verbose_name='Result - bops')),
                ('jbb_attachment', models.FileField(upload_to='%Y-%m-%d/%H-%M-%S', blank=True)),
                ('app_name', models.CharField(verbose_name='app name', max_length=256)),
                ('processor_number', models.PositiveSmallIntegerField(verbose_name='Processor Number')),
                ('jvm_parameter', models.CharField(verbose_name='JVM Parameter', max_length=512)),
                ('jvm_instances', models.PositiveSmallIntegerField(verbose_name='JVM Instances')),
                ('warehouses', models.PositiveIntegerField(verbose_name='WAREHOUSES')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpecjbbMachine',
            fields=[
                ('id', models.AutoField(serialize=False, primary_key=True, verbose_name='ID', auto_created=True)),
                ('machine_side', models.CharField(choices=[('server_side', 'As a Server'), ('client_side', 'As a Client')], default='server_side', verbose_name='Server/Client', max_length=32)),
                ('machine_name', models.CharField(choices=[('Habonaro', 'Habonaro'), ('Palmetto', 'Palmetto'), ('S812L', 'S812L'), ('S822L', 'S822L'), ('X86_E5', 'X86 E5 Series')], default='Habonaro', verbose_name='Machine Name', max_length=32)),
                ('architecture_type', models.CharField(choices=[('x86', 'x86'), ('powerpc', 'powerpc'), ('arm64', 'arm64'), ('mips', 'mips')], default='powerpc', verbose_name='Architecture', max_length=32)),
                ('byte_order', models.CharField(choices=[('litter_endian', 'Litter Endian'), ('big_endian', 'Big Endian')], default='big_endian', verbose_name='Litter or Big endian', max_length=32)),
                ('cpu_frequency', models.FloatField(verbose_name='CPU Clock Rate (GHZ)')),
                ('l1_instruction', models.PositiveSmallIntegerField(verbose_name='L1 I-Cache (KB)')),
                ('l1_data', models.PositiveSmallIntegerField(verbose_name='L1 D-Cache (KB)')),
                ('l2', models.PositiveSmallIntegerField(verbose_name='L2 Cache (KB)')),
                ('l3', models.PositiveIntegerField(default=0, verbose_name='L3 Cache (KB)', blank=True)),
                ('l4', models.PositiveIntegerField(default=0, verbose_name='L4 Cache (KB)', blank=True)),
                ('memory', models.PositiveIntegerField(verbose_name='Memory (GB)')),
                ('os_type', models.CharField(choices=[('Ubuntu 14.04.1', 'Ubuntu 14.04.1'), ('Ubuntu 14.04.2', 'Ubuntu 14.04.2'), ('Ubuntu 14.04.3', 'Ubuntu 14.04.3'), ('Ubuntu 14.04.10', 'Ubuntu 14.04.10'), ('RHEL 7.0', 'RHEL 7.0'), ('CentOS 6.6', 'CentOS 6.6'), ('CentOS 6.7', 'CentOS 6.7'), ('CentOS 7.0', 'CentOS 7.0'), ('Fedora 22', 'Fedora 22'), ('PowerKVM 2.1.1', 'PowerKVM 2.1.1')], default='Ubuntu 14.04.2', verbose_name='Operation System', max_length=64)),
                ('kernel_version', models.CharField(choices=[('2.6.32-573.7.1.e16.centos.plus.x86_64', '2.6.32-573.7.1.e16.centos.plus.x86_64'), ('3.10.0-pagecoloring-cpufreq+', '3.10.0-pagecoloring-cpufreq+'), ('3.10.53-2025.1.pkvm2_1_1.54.ppc64', '3.10.53-2025.1.pkvm2_1_1.54.ppc64'), ('3.10.89-2045.1.pkvm2_1_1.74.ppc64', '3.10.89-2045.1.pkvm2_1_1.74.ppc64'), ('3.13.0-32-generic', '3.13.0-32-generic'), ('3.16.0-23-generic', '3.16.0-23-generic'), ('3.16.0-30-generic', '3.16.0-30-generic'), ('3.16.0-51-generic', '3.16.0-51-generic'), ('3.19.0-25-generic', '3.19.0-25-generic'), ('4.0.4-301.fc22.ppc64', '4.0.4-301.fc22.ppc64'), ('4.1.0-pagecoloring', '4.1.0-pagecoloring')], default='3.16.0-30-generic', verbose_name='Kernel Version', max_length=64)),
                ('dependence_information', models.TextField(max_length=1024, verbose_name='Dependency Instruction', blank=True)),
                ('last_modify_time', models.DateTimeField(auto_now=True, verbose_name='Last Modified Time')),
                ('app_information', models.ForeignKey(to='performance.SpecjbbInformation', verbose_name='Specjbb Information')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpecjvmInformation',
            fields=[
                ('id', models.AutoField(serialize=False, primary_key=True, verbose_name='ID', auto_created=True)),
                ('project_name', models.CharField(choices=[('CP1_TEST', 'CP1_TEST'), ('CP2_TEST', 'CP2_TEST'), ('CP3_TEST', 'CP3_TEST')], verbose_name='Project Name', max_length=32)),
                ('project_id', models.CharField(choices=[('1D', '1D'), ('2D', '2D'), ('3D', '3D')], verbose_name='Project ID', max_length=32)),
                ('cpu_type', models.CharField(choices=[('CPU 1.0', 'CPU 1.0'), ('CPU 1.1', 'CPU 1.1')], default='CPU 1.0', verbose_name='CPU Type', max_length=32)),
                ('reference_link', models.URLField(default='http://10.100.8.185:8090', verbose_name='Reference Link (Confluence)')),
                ('neck_cpu', models.BooleanField(verbose_name='CPU Neck')),
                ('neck_io', models.BooleanField(verbose_name='IO Neck')),
                ('neck_memory', models.BooleanField(verbose_name='Memory Neck')),
                ('neck_net', models.BooleanField(verbose_name='Net Neck')),
                ('test_application', models.CharField(default='Spec jvm', editable=False, max_length=32)),
                ('version', models.CharField(default='2008', verbose_name='Application Version', max_length=10)),
                ('record_result_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Record Result Time')),
                ('result_bops', models.FloatField(verbose_name='Result - bops')),
                ('jvm_attachment', models.FileField(upload_to='%Y-%m-%d/%H-%M-%S', blank=True)),
                ('app_name', models.CharField(verbose_name='app name', max_length=256)),
                ('jvm_parameter', models.CharField(verbose_name='JVM Parameter', max_length=512)),
                ('specjvm_parameter', models.CharField(verbose_name='Spec JVM Parameter', max_length=512)),
                ('processor_number', models.PositiveSmallIntegerField(verbose_name='Processor Number')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpecjvmMachine',
            fields=[
                ('id', models.AutoField(serialize=False, primary_key=True, verbose_name='ID', auto_created=True)),
                ('machine_side', models.CharField(choices=[('server_side', 'As a Server'), ('client_side', 'As a Client')], default='server_side', verbose_name='Server/Client', max_length=32)),
                ('machine_name', models.CharField(choices=[('Habonaro', 'Habonaro'), ('Palmetto', 'Palmetto'), ('S812L', 'S812L'), ('S822L', 'S822L'), ('X86_E5', 'X86 E5 Series')], default='Habonaro', verbose_name='Machine Name', max_length=32)),
                ('architecture_type', models.CharField(choices=[('x86', 'x86'), ('powerpc', 'powerpc'), ('arm64', 'arm64'), ('mips', 'mips')], default='powerpc', verbose_name='Architecture', max_length=32)),
                ('byte_order', models.CharField(choices=[('litter_endian', 'Litter Endian'), ('big_endian', 'Big Endian')], default='big_endian', verbose_name='Litter or Big endian', max_length=32)),
                ('cpu_frequency', models.FloatField(verbose_name='CPU Clock Rate (GHZ)')),
                ('l1_instruction', models.PositiveSmallIntegerField(verbose_name='L1 I-Cache (KB)')),
                ('l1_data', models.PositiveSmallIntegerField(verbose_name='L1 D-Cache (KB)')),
                ('l2', models.PositiveSmallIntegerField(verbose_name='L2 Cache (KB)')),
                ('l3', models.PositiveIntegerField(default=0, verbose_name='L3 Cache (KB)', blank=True)),
                ('l4', models.PositiveIntegerField(default=0, verbose_name='L4 Cache (KB)', blank=True)),
                ('memory', models.PositiveIntegerField(verbose_name='Memory (GB)')),
                ('os_type', models.CharField(choices=[('Ubuntu 14.04.1', 'Ubuntu 14.04.1'), ('Ubuntu 14.04.2', 'Ubuntu 14.04.2'), ('Ubuntu 14.04.3', 'Ubuntu 14.04.3'), ('Ubuntu 14.04.10', 'Ubuntu 14.04.10'), ('RHEL 7.0', 'RHEL 7.0'), ('CentOS 6.6', 'CentOS 6.6'), ('CentOS 6.7', 'CentOS 6.7'), ('CentOS 7.0', 'CentOS 7.0'), ('Fedora 22', 'Fedora 22'), ('PowerKVM 2.1.1', 'PowerKVM 2.1.1')], default='Ubuntu 14.04.2', verbose_name='Operation System', max_length=64)),
                ('kernel_version', models.CharField(choices=[('2.6.32-573.7.1.e16.centos.plus.x86_64', '2.6.32-573.7.1.e16.centos.plus.x86_64'), ('3.10.0-pagecoloring-cpufreq+', '3.10.0-pagecoloring-cpufreq+'), ('3.10.53-2025.1.pkvm2_1_1.54.ppc64', '3.10.53-2025.1.pkvm2_1_1.54.ppc64'), ('3.10.89-2045.1.pkvm2_1_1.74.ppc64', '3.10.89-2045.1.pkvm2_1_1.74.ppc64'), ('3.13.0-32-generic', '3.13.0-32-generic'), ('3.16.0-23-generic', '3.16.0-23-generic'), ('3.16.0-30-generic', '3.16.0-30-generic'), ('3.16.0-51-generic', '3.16.0-51-generic'), ('3.19.0-25-generic', '3.19.0-25-generic'), ('4.0.4-301.fc22.ppc64', '4.0.4-301.fc22.ppc64'), ('4.1.0-pagecoloring', '4.1.0-pagecoloring')], default='3.16.0-30-generic', verbose_name='Kernel Version', max_length=64)),
                ('dependence_information', models.TextField(max_length=1024, verbose_name='Dependency Instruction', blank=True)),
                ('last_modify_time', models.DateTimeField(auto_now=True, verbose_name='Last Modified Time')),
                ('app_information', models.ForeignKey(to='performance.SpecjvmInformation', verbose_name='Specjvm Information')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SplashInformation',
            fields=[
                ('id', models.AutoField(serialize=False, primary_key=True, verbose_name='ID', auto_created=True)),
                ('project_name', models.CharField(choices=[('CP1_TEST', 'CP1_TEST'), ('CP2_TEST', 'CP2_TEST'), ('CP3_TEST', 'CP3_TEST')], verbose_name='Project Name', max_length=32)),
                ('project_id', models.CharField(choices=[('1D', '1D'), ('2D', '2D'), ('3D', '3D')], verbose_name='Project ID', max_length=32)),
                ('cpu_type', models.CharField(choices=[('CPU 1.0', 'CPU 1.0'), ('CPU 1.1', 'CPU 1.1')], default='CPU 1.0', verbose_name='CPU Type', max_length=32)),
                ('reference_link', models.URLField(default='http://10.100.8.185:8090', verbose_name='Reference Link (Confluence)')),
                ('neck_cpu', models.BooleanField(verbose_name='CPU Neck')),
                ('neck_io', models.BooleanField(verbose_name='IO Neck')),
                ('neck_memory', models.BooleanField(verbose_name='Memory Neck')),
                ('neck_net', models.BooleanField(verbose_name='Net Neck')),
                ('test_application', models.CharField(default='Splash', editable=False, max_length=32)),
                ('version', models.CharField(default='2.0', verbose_name='Application Version', max_length=10)),
                ('record_result_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Record Result Time')),
                ('result_time', models.FloatField(verbose_name='Result - Time(us)')),
                ('app_name', models.CharField(verbose_name='app name', max_length=256)),
                ('problem_size', models.CharField(verbose_name='Problem Size', max_length=256)),
                ('processor_number', models.PositiveSmallIntegerField(verbose_name='Processor Number')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SplashMachine',
            fields=[
                ('id', models.AutoField(serialize=False, primary_key=True, verbose_name='ID', auto_created=True)),
                ('machine_side', models.CharField(choices=[('server_side', 'As a Server'), ('client_side', 'As a Client')], default='server_side', verbose_name='Server/Client', max_length=32)),
                ('machine_name', models.CharField(choices=[('Habonaro', 'Habonaro'), ('Palmetto', 'Palmetto'), ('S812L', 'S812L'), ('S822L', 'S822L'), ('X86_E5', 'X86 E5 Series')], default='Habonaro', verbose_name='Machine Name', max_length=32)),
                ('architecture_type', models.CharField(choices=[('x86', 'x86'), ('powerpc', 'powerpc'), ('arm64', 'arm64'), ('mips', 'mips')], default='powerpc', verbose_name='Architecture', max_length=32)),
                ('byte_order', models.CharField(choices=[('litter_endian', 'Litter Endian'), ('big_endian', 'Big Endian')], default='big_endian', verbose_name='Litter or Big endian', max_length=32)),
                ('cpu_frequency', models.FloatField(verbose_name='CPU Clock Rate (GHZ)')),
                ('l1_instruction', models.PositiveSmallIntegerField(verbose_name='L1 I-Cache (KB)')),
                ('l1_data', models.PositiveSmallIntegerField(verbose_name='L1 D-Cache (KB)')),
                ('l2', models.PositiveSmallIntegerField(verbose_name='L2 Cache (KB)')),
                ('l3', models.PositiveIntegerField(default=0, verbose_name='L3 Cache (KB)', blank=True)),
                ('l4', models.PositiveIntegerField(default=0, verbose_name='L4 Cache (KB)', blank=True)),
                ('memory', models.PositiveIntegerField(verbose_name='Memory (GB)')),
                ('os_type', models.CharField(choices=[('Ubuntu 14.04.1', 'Ubuntu 14.04.1'), ('Ubuntu 14.04.2', 'Ubuntu 14.04.2'), ('Ubuntu 14.04.3', 'Ubuntu 14.04.3'), ('Ubuntu 14.04.10', 'Ubuntu 14.04.10'), ('RHEL 7.0', 'RHEL 7.0'), ('CentOS 6.6', 'CentOS 6.6'), ('CentOS 6.7', 'CentOS 6.7'), ('CentOS 7.0', 'CentOS 7.0'), ('Fedora 22', 'Fedora 22'), ('PowerKVM 2.1.1', 'PowerKVM 2.1.1')], default='Ubuntu 14.04.2', verbose_name='Operation System', max_length=64)),
                ('kernel_version', models.CharField(choices=[('2.6.32-573.7.1.e16.centos.plus.x86_64', '2.6.32-573.7.1.e16.centos.plus.x86_64'), ('3.10.0-pagecoloring-cpufreq+', '3.10.0-pagecoloring-cpufreq+'), ('3.10.53-2025.1.pkvm2_1_1.54.ppc64', '3.10.53-2025.1.pkvm2_1_1.54.ppc64'), ('3.10.89-2045.1.pkvm2_1_1.74.ppc64', '3.10.89-2045.1.pkvm2_1_1.74.ppc64'), ('3.13.0-32-generic', '3.13.0-32-generic'), ('3.16.0-23-generic', '3.16.0-23-generic'), ('3.16.0-30-generic', '3.16.0-30-generic'), ('3.16.0-51-generic', '3.16.0-51-generic'), ('3.19.0-25-generic', '3.19.0-25-generic'), ('4.0.4-301.fc22.ppc64', '4.0.4-301.fc22.ppc64'), ('4.1.0-pagecoloring', '4.1.0-pagecoloring')], default='3.16.0-30-generic', verbose_name='Kernel Version', max_length=64)),
                ('dependence_information', models.TextField(max_length=1024, verbose_name='Dependency Instruction', blank=True)),
                ('last_modify_time', models.DateTimeField(auto_now=True, verbose_name='Last Modified Time')),
                ('app_information', models.ForeignKey(to='performance.SplashInformation', verbose_name='Splash Information')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TpccInformation',
            fields=[
                ('id', models.AutoField(serialize=False, primary_key=True, verbose_name='ID', auto_created=True)),
                ('project_name', models.CharField(choices=[('CP1_TEST', 'CP1_TEST'), ('CP2_TEST', 'CP2_TEST'), ('CP3_TEST', 'CP3_TEST')], verbose_name='Project Name', max_length=32)),
                ('project_id', models.CharField(choices=[('1D', '1D'), ('2D', '2D'), ('3D', '3D')], verbose_name='Project ID', max_length=32)),
                ('cpu_type', models.CharField(choices=[('CPU 1.0', 'CPU 1.0'), ('CPU 1.1', 'CPU 1.1')], default='CPU 1.0', verbose_name='CPU Type', max_length=32)),
                ('reference_link', models.URLField(default='http://10.100.8.185:8090', verbose_name='Reference Link (Confluence)')),
                ('neck_cpu', models.BooleanField(verbose_name='CPU Neck')),
                ('neck_io', models.BooleanField(verbose_name='IO Neck')),
                ('neck_memory', models.BooleanField(verbose_name='Memory Neck')),
                ('neck_net', models.BooleanField(verbose_name='Net Neck')),
                ('test_application', models.CharField(default='TPC-C', editable=False, max_length=32)),
                ('version', models.CharField(default='0.1', verbose_name='Application Version', max_length=10)),
                ('record_result_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Record Result Time')),
                ('result_tpmc', models.FloatField(verbose_name='Result - tpmC')),
                ('warehouses', models.PositiveIntegerField(verbose_name='WAREHOUSES')),
                ('terminals', models.PositiveSmallIntegerField(verbose_name='TERMINALS')),
                ('run_time', models.FloatField(verbose_name='RUN_TIME')),
                ('network_bandwidth', models.PositiveSmallIntegerField(verbose_name='Network Bandwidth (Mbps)')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TpccMachine',
            fields=[
                ('id', models.AutoField(serialize=False, primary_key=True, verbose_name='ID', auto_created=True)),
                ('machine_side', models.CharField(choices=[('server_side', 'As a Server'), ('client_side', 'As a Client')], default='server_side', verbose_name='Server/Client', max_length=32)),
                ('machine_name', models.CharField(choices=[('Habonaro', 'Habonaro'), ('Palmetto', 'Palmetto'), ('S812L', 'S812L'), ('S822L', 'S822L'), ('X86_E5', 'X86 E5 Series')], default='Habonaro', verbose_name='Machine Name', max_length=32)),
                ('architecture_type', models.CharField(choices=[('x86', 'x86'), ('powerpc', 'powerpc'), ('arm64', 'arm64'), ('mips', 'mips')], default='powerpc', verbose_name='Architecture', max_length=32)),
                ('byte_order', models.CharField(choices=[('litter_endian', 'Litter Endian'), ('big_endian', 'Big Endian')], default='big_endian', verbose_name='Litter or Big endian', max_length=32)),
                ('cpu_frequency', models.FloatField(verbose_name='CPU Clock Rate (GHZ)')),
                ('l1_instruction', models.PositiveSmallIntegerField(verbose_name='L1 I-Cache (KB)')),
                ('l1_data', models.PositiveSmallIntegerField(verbose_name='L1 D-Cache (KB)')),
                ('l2', models.PositiveSmallIntegerField(verbose_name='L2 Cache (KB)')),
                ('l3', models.PositiveIntegerField(default=0, verbose_name='L3 Cache (KB)', blank=True)),
                ('l4', models.PositiveIntegerField(default=0, verbose_name='L4 Cache (KB)', blank=True)),
                ('memory', models.PositiveIntegerField(verbose_name='Memory (GB)')),
                ('os_type', models.CharField(choices=[('Ubuntu 14.04.1', 'Ubuntu 14.04.1'), ('Ubuntu 14.04.2', 'Ubuntu 14.04.2'), ('Ubuntu 14.04.3', 'Ubuntu 14.04.3'), ('Ubuntu 14.04.10', 'Ubuntu 14.04.10'), ('RHEL 7.0', 'RHEL 7.0'), ('CentOS 6.6', 'CentOS 6.6'), ('CentOS 6.7', 'CentOS 6.7'), ('CentOS 7.0', 'CentOS 7.0'), ('Fedora 22', 'Fedora 22'), ('PowerKVM 2.1.1', 'PowerKVM 2.1.1')], default='Ubuntu 14.04.2', verbose_name='Operation System', max_length=64)),
                ('kernel_version', models.CharField(choices=[('2.6.32-573.7.1.e16.centos.plus.x86_64', '2.6.32-573.7.1.e16.centos.plus.x86_64'), ('3.10.0-pagecoloring-cpufreq+', '3.10.0-pagecoloring-cpufreq+'), ('3.10.53-2025.1.pkvm2_1_1.54.ppc64', '3.10.53-2025.1.pkvm2_1_1.54.ppc64'), ('3.10.89-2045.1.pkvm2_1_1.74.ppc64', '3.10.89-2045.1.pkvm2_1_1.74.ppc64'), ('3.13.0-32-generic', '3.13.0-32-generic'), ('3.16.0-23-generic', '3.16.0-23-generic'), ('3.16.0-30-generic', '3.16.0-30-generic'), ('3.16.0-51-generic', '3.16.0-51-generic'), ('3.19.0-25-generic', '3.19.0-25-generic'), ('4.0.4-301.fc22.ppc64', '4.0.4-301.fc22.ppc64'), ('4.1.0-pagecoloring', '4.1.0-pagecoloring')], default='3.16.0-30-generic', verbose_name='Kernel Version', max_length=64)),
                ('dependence_information', models.TextField(max_length=1024, verbose_name='Dependency Instruction', blank=True)),
                ('last_modify_time', models.DateTimeField(auto_now=True, verbose_name='Last Modified Time')),
                ('app_information', models.ForeignKey(to='performance.TpccInformation', verbose_name='TPC-C Information')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WebServingInformation',
            fields=[
                ('id', models.AutoField(serialize=False, primary_key=True, verbose_name='ID', auto_created=True)),
                ('project_name', models.CharField(choices=[('CP1_TEST', 'CP1_TEST'), ('CP2_TEST', 'CP2_TEST'), ('CP3_TEST', 'CP3_TEST')], verbose_name='Project Name', max_length=32)),
                ('project_id', models.CharField(choices=[('1D', '1D'), ('2D', '2D'), ('3D', '3D')], verbose_name='Project ID', max_length=32)),
                ('cpu_type', models.CharField(choices=[('CPU 1.0', 'CPU 1.0'), ('CPU 1.1', 'CPU 1.1')], default='CPU 1.0', verbose_name='CPU Type', max_length=32)),
                ('reference_link', models.URLField(default='http://10.100.8.185:8090', verbose_name='Reference Link (Confluence)')),
                ('neck_cpu', models.BooleanField(verbose_name='CPU Neck')),
                ('neck_io', models.BooleanField(verbose_name='IO Neck')),
                ('neck_memory', models.BooleanField(verbose_name='Memory Neck')),
                ('neck_net', models.BooleanField(verbose_name='Net Neck')),
                ('test_application', models.CharField(default='WebServing', editable=False, max_length=32)),
                ('version', models.CharField(default='0.1', verbose_name='Application Version', max_length=10)),
                ('record_result_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Record Result Time')),
                ('result_ops', models.FloatField(verbose_name='Result - OPS')),
                ('result_passed', models.BooleanField(verbose_name='Result - PASSED')),
                ('result_warnings', models.BooleanField(verbose_name='Result - WARNINGS')),
                ('result_errors', models.BooleanField(verbose_name='Result - ERRORS')),
                ('warm_up', models.PositiveSmallIntegerField(verbose_name='Warm Up')),
                ('con_users', models.PositiveSmallIntegerField(verbose_name='CON Users')),
                ('pm_static', models.BooleanField(verbose_name='PM Staic')),
                ('pm_max_connections', models.PositiveSmallIntegerField(verbose_name='PM Max Connections')),
                ('sql_max_connections', models.PositiveSmallIntegerField(verbose_name='SQL Max Connections')),
                ('worker_processes', models.PositiveSmallIntegerField(verbose_name='Worker Processes')),
                ('worker_connection', models.PositiveSmallIntegerField(verbose_name='Worker Connection')),
                ('network_bandwidth', models.PositiveSmallIntegerField(verbose_name='Network Bandwidth (Mbps)')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WebServingMachine',
            fields=[
                ('id', models.AutoField(serialize=False, primary_key=True, verbose_name='ID', auto_created=True)),
                ('os_type', models.CharField(choices=[('Ubuntu 14.04.1', 'Ubuntu 14.04.1'), ('Ubuntu 14.04.2', 'Ubuntu 14.04.2'), ('Ubuntu 14.04.3', 'Ubuntu 14.04.3'), ('Ubuntu 14.04.10', 'Ubuntu 14.04.10'), ('RHEL 7.0', 'RHEL 7.0'), ('CentOS 6.6', 'CentOS 6.6'), ('CentOS 6.7', 'CentOS 6.7'), ('CentOS 7.0', 'CentOS 7.0'), ('Fedora 22', 'Fedora 22'), ('PowerKVM 2.1.1', 'PowerKVM 2.1.1')], default='Ubuntu 14.04.2', verbose_name='Operation System', max_length=64)),
                ('kernel_version', models.CharField(choices=[('2.6.32-573.7.1.e16.centos.plus.x86_64', '2.6.32-573.7.1.e16.centos.plus.x86_64'), ('3.10.0-pagecoloring-cpufreq+', '3.10.0-pagecoloring-cpufreq+'), ('3.10.53-2025.1.pkvm2_1_1.54.ppc64', '3.10.53-2025.1.pkvm2_1_1.54.ppc64'), ('3.10.89-2045.1.pkvm2_1_1.74.ppc64', '3.10.89-2045.1.pkvm2_1_1.74.ppc64'), ('3.13.0-32-generic', '3.13.0-32-generic'), ('3.16.0-23-generic', '3.16.0-23-generic'), ('3.16.0-30-generic', '3.16.0-30-generic'), ('3.16.0-51-generic', '3.16.0-51-generic'), ('3.19.0-25-generic', '3.19.0-25-generic'), ('4.0.4-301.fc22.ppc64', '4.0.4-301.fc22.ppc64'), ('4.1.0-pagecoloring', '4.1.0-pagecoloring')], default='3.16.0-30-generic', verbose_name='Kernel Version', max_length=64)),
                ('dependence_information', models.TextField(max_length=1024, verbose_name='Dependency Instruction', blank=True)),
                ('machine_side', models.CharField(choices=[('frontend', 'As a Frontend'), ('backend', 'As a Backend'), ('client_side', 'As a Client')], default='client_side', verbose_name='Machine Role', max_length=32)),
                ('machine_name', models.CharField(choices=[('Habonaro', 'Habonaro'), ('Palmetto', 'Palmetto'), ('S812L', 'S812L'), ('S822L', 'S822L'), ('X86_E5', 'X86 E5 Series')], default='Habonaro', verbose_name='Machine Name', max_length=32)),
                ('architecture_type', models.CharField(choices=[('x86', 'x86'), ('powerpc', 'powerpc'), ('arm64', 'arm64'), ('mips', 'mips')], default='powerpc', verbose_name='Architecture', max_length=32)),
                ('byte_order', models.CharField(choices=[('litter_endian', 'Litter Endian'), ('big_endian', 'Big Endian')], default='big_endian', verbose_name='Litter or Big endian', max_length=32)),
                ('cpu_frequency', models.FloatField(verbose_name='CPU Clock Rate (GHZ)')),
                ('l1_instruction', models.PositiveSmallIntegerField(verbose_name='L1 I-Cache (KB)')),
                ('l1_data', models.PositiveSmallIntegerField(verbose_name='L1 D-Cache (KB)')),
                ('l2', models.PositiveSmallIntegerField(verbose_name='L2 Cache (KB)')),
                ('l3', models.PositiveIntegerField(default=0, verbose_name='L3 Cache (KB)', blank=True)),
                ('half_l3', models.BooleanField(verbose_name='Half L3 Cache')),
                ('l4', models.PositiveIntegerField(default=0, verbose_name='L4 Cache (KB)', blank=True)),
                ('memory', models.PositiveIntegerField(verbose_name='Memory (MB)')),
                ('last_modify_time', models.DateTimeField(auto_now=True, verbose_name='Last Modified Time')),
                ('app_information', models.ForeignKey(to='performance.WebServingInformation', verbose_name='WebServing Information')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
