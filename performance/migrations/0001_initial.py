# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DataCachingInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, verbose_name='ID', primary_key=True, serialize=False)),
                ('project_name', models.CharField(max_length=32, verbose_name='Project Name')),
                ('project_id', models.CharField(max_length=32, verbose_name='Project ID')),
                ('reference_link', models.URLField(verbose_name='Reference Link (Confluence)', default='http://10.100.8.185:8090')),
                ('neck_cpu', models.BooleanField(verbose_name='CPU Neck')),
                ('neck_io', models.BooleanField(verbose_name='IO Neck')),
                ('neck_memory', models.BooleanField(verbose_name='Memory Neck')),
                ('neck_net', models.BooleanField(verbose_name='Net Neck')),
                ('test_application', models.CharField(max_length=32, editable=False, default='Data Caching')),
                ('version', models.CharField(max_length=10, verbose_name='Application Version', default='0.1')),
                ('record_result_time', models.DateTimeField(verbose_name='Record Result Time', default=django.utils.timezone.now)),
                ('result_max_rps', models.DecimalField(max_digits=12, verbose_name='Result - Max RPS', decimal_places=4)),
                ('data_scale', models.PositiveSmallIntegerField(verbose_name='Data Scale')),
                ('number_works', models.PositiveSmallIntegerField(verbose_name='Work Number')),
                ('number_connections', models.PositiveSmallIntegerField(verbose_name='Connection Number')),
                ('number_threads', models.PositiveSmallIntegerField(verbose_name='Thread Number')),
                ('network_bandwidth', models.PositiveSmallIntegerField(verbose_name='Network Bandwidth (Mbps)')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataCachingMachine',
            fields=[
                ('id', models.AutoField(auto_created=True, verbose_name='ID', primary_key=True, serialize=False)),
                ('machine_side', models.CharField(max_length=32, verbose_name='Server/Client', default='server_side', choices=[('server_side', 'As a Server'), ('client_side', 'As a Client')])),
                ('machine_name', models.CharField(max_length=32, verbose_name='Machine Name', default='Habonaro', choices=[('Habonaro', 'Habonaro'), ('Palmetto', 'Palmetto'), ('S812L', 'S812L'), ('S822L', 'S822L'), ('X86_E5', 'X86 E5 Series')])),
                ('cpu_type', models.CharField(max_length=16, verbose_name='CPU Type')),
                ('architecture_type', models.CharField(max_length=32, verbose_name='Architecture', default='powerpc', choices=[('x86', 'x86'), ('powerpc', 'powerpc'), ('arm64', 'arm64'), ('mips', 'mips')])),
                ('byte_order', models.CharField(max_length=32, verbose_name='Litter or Big endian', default='big_endian', choices=[('litter_endian', 'Litter Endian'), ('big_endian', 'Big Endian')])),
                ('l1_instruction', models.PositiveSmallIntegerField(verbose_name='L1 Instruction (KB)')),
                ('l1_data', models.PositiveSmallIntegerField(verbose_name='L1 Data (KB)')),
                ('l2', models.PositiveSmallIntegerField(verbose_name='L2 Cache (KB)')),
                ('l3', models.PositiveIntegerField(blank=True, verbose_name='L3 Cache (KB)', default=0)),
                ('l4', models.PositiveIntegerField(blank=True, verbose_name='L4 Cache (KB)', default=0)),
                ('memory', models.PositiveIntegerField(verbose_name='Memory (MB)')),
                ('os_type', models.CharField(max_length=64, verbose_name='Operation System')),
                ('kernel_version', models.CharField(max_length=64, verbose_name='Kernel Version')),
                ('dependence_information', models.TextField(max_length=1024, verbose_name='Dependency Instruction', blank=True)),
                ('last_modify_time', models.DateTimeField(verbose_name='Last Modified Time', auto_now=True)),
                ('app_information', models.ForeignKey(verbose_name='DataCaching Information', to='performance.DataCachingInformation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LmbenchInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, verbose_name='ID', primary_key=True, serialize=False)),
                ('project_name', models.CharField(max_length=32, verbose_name='Project Name')),
                ('project_id', models.CharField(max_length=32, verbose_name='Project ID')),
                ('reference_link', models.URLField(verbose_name='Reference Link (Confluence)', default='http://10.100.8.185:8090')),
                ('neck_cpu', models.BooleanField(verbose_name='CPU Neck')),
                ('neck_io', models.BooleanField(verbose_name='IO Neck')),
                ('neck_memory', models.BooleanField(verbose_name='Memory Neck')),
                ('neck_net', models.BooleanField(verbose_name='Net Neck')),
                ('test_application', models.CharField(max_length=32, editable=False, default='Lmbench')),
                ('version', models.CharField(max_length=10, verbose_name='Application Version', default='0.1')),
                ('record_result_time', models.DateTimeField(verbose_name='Record Result Time', default=django.utils.timezone.now)),
                ('result_time', models.DecimalField(max_digits=12, verbose_name='Result - Time', decimal_places=4)),
                ('app_name', models.CharField(max_length=256, verbose_name='app name', default='bw_mem')),
                ('problem_size', models.CharField(max_length=256, verbose_name='Problem Size')),
                ('node', models.CharField(max_length=256, verbose_name='Node')),
                ('phycpu', models.CharField(max_length=256, verbose_name='Physical CPU')),
                ('thread_number', models.PositiveSmallIntegerField(verbose_name='Thread Number')),
                ('stride_size', models.PositiveIntegerField(verbose_name='Stride Size (Byte)')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LmbenchMachine',
            fields=[
                ('id', models.AutoField(auto_created=True, verbose_name='ID', primary_key=True, serialize=False)),
                ('machine_side', models.CharField(max_length=32, verbose_name='Server/Client', default='server_side', choices=[('server_side', 'As a Server'), ('client_side', 'As a Client')])),
                ('machine_name', models.CharField(max_length=32, verbose_name='Machine Name', default='Habonaro', choices=[('Habonaro', 'Habonaro'), ('Palmetto', 'Palmetto'), ('S812L', 'S812L'), ('S822L', 'S822L'), ('X86_E5', 'X86 E5 Series')])),
                ('cpu_type', models.CharField(max_length=16, verbose_name='CPU Type')),
                ('architecture_type', models.CharField(max_length=32, verbose_name='Architecture', default='powerpc', choices=[('x86', 'x86'), ('powerpc', 'powerpc'), ('arm64', 'arm64'), ('mips', 'mips')])),
                ('byte_order', models.CharField(max_length=32, verbose_name='Litter or Big endian', default='big_endian', choices=[('litter_endian', 'Litter Endian'), ('big_endian', 'Big Endian')])),
                ('l1_instruction', models.PositiveSmallIntegerField(verbose_name='L1 Instruction (KB)')),
                ('l1_data', models.PositiveSmallIntegerField(verbose_name='L1 Data (KB)')),
                ('l2', models.PositiveSmallIntegerField(verbose_name='L2 Cache (KB)')),
                ('l3', models.PositiveIntegerField(blank=True, verbose_name='L3 Cache (KB)', default=0)),
                ('l4', models.PositiveIntegerField(blank=True, verbose_name='L4 Cache (KB)', default=0)),
                ('memory', models.PositiveIntegerField(verbose_name='Memory (MB)')),
                ('os_type', models.CharField(max_length=64, verbose_name='Operation System')),
                ('kernel_version', models.CharField(max_length=64, verbose_name='Kernel Version')),
                ('dependence_information', models.TextField(max_length=1024, verbose_name='Dependency Instruction', blank=True)),
                ('last_modify_time', models.DateTimeField(verbose_name='Last Modified Time', auto_now=True)),
                ('app_information', models.ForeignKey(verbose_name='Lmbench Information', to='performance.LmbenchInformation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ParsecInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, verbose_name='ID', primary_key=True, serialize=False)),
                ('project_name', models.CharField(max_length=32, verbose_name='Project Name')),
                ('project_id', models.CharField(max_length=32, verbose_name='Project ID')),
                ('reference_link', models.URLField(verbose_name='Reference Link (Confluence)', default='http://10.100.8.185:8090')),
                ('neck_cpu', models.BooleanField(verbose_name='CPU Neck')),
                ('neck_io', models.BooleanField(verbose_name='IO Neck')),
                ('neck_memory', models.BooleanField(verbose_name='Memory Neck')),
                ('neck_net', models.BooleanField(verbose_name='Net Neck')),
                ('test_application', models.CharField(max_length=32, editable=False, default='Parsec')),
                ('version', models.CharField(max_length=10, verbose_name='Application Version', default='0.1')),
                ('record_result_time', models.DateTimeField(verbose_name='Record Result Time', default=django.utils.timezone.now)),
                ('result_time', models.DecimalField(max_digits=12, verbose_name='Result - Time', decimal_places=4)),
                ('app_name', models.CharField(max_length=256, verbose_name='app name')),
                ('input_set', models.CharField(max_length=256, verbose_name='Input Set')),
                ('thread_number', models.PositiveSmallIntegerField(verbose_name='Thread Number')),
                ('smt_number', models.PositiveSmallIntegerField(verbose_name='SMT')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ParsecMachine',
            fields=[
                ('id', models.AutoField(auto_created=True, verbose_name='ID', primary_key=True, serialize=False)),
                ('machine_side', models.CharField(max_length=32, verbose_name='Server/Client', default='server_side', choices=[('server_side', 'As a Server'), ('client_side', 'As a Client')])),
                ('machine_name', models.CharField(max_length=32, verbose_name='Machine Name', default='Habonaro', choices=[('Habonaro', 'Habonaro'), ('Palmetto', 'Palmetto'), ('S812L', 'S812L'), ('S822L', 'S822L'), ('X86_E5', 'X86 E5 Series')])),
                ('cpu_type', models.CharField(max_length=16, verbose_name='CPU Type')),
                ('architecture_type', models.CharField(max_length=32, verbose_name='Architecture', default='powerpc', choices=[('x86', 'x86'), ('powerpc', 'powerpc'), ('arm64', 'arm64'), ('mips', 'mips')])),
                ('byte_order', models.CharField(max_length=32, verbose_name='Litter or Big endian', default='big_endian', choices=[('litter_endian', 'Litter Endian'), ('big_endian', 'Big Endian')])),
                ('l1_instruction', models.PositiveSmallIntegerField(verbose_name='L1 Instruction (KB)')),
                ('l1_data', models.PositiveSmallIntegerField(verbose_name='L1 Data (KB)')),
                ('l2', models.PositiveSmallIntegerField(verbose_name='L2 Cache (KB)')),
                ('l3', models.PositiveIntegerField(blank=True, verbose_name='L3 Cache (KB)', default=0)),
                ('l4', models.PositiveIntegerField(blank=True, verbose_name='L4 Cache (KB)', default=0)),
                ('memory', models.PositiveIntegerField(verbose_name='Memory (MB)')),
                ('os_type', models.CharField(max_length=64, verbose_name='Operation System')),
                ('kernel_version', models.CharField(max_length=64, verbose_name='Kernel Version')),
                ('dependence_information', models.TextField(max_length=1024, verbose_name='Dependency Instruction', blank=True)),
                ('last_modify_time', models.DateTimeField(verbose_name='Last Modified Time', auto_now=True)),
                ('app_information', models.ForeignKey(verbose_name='Parsec Information', to='performance.ParsecInformation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SiriusSuitInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, verbose_name='ID', primary_key=True, serialize=False)),
                ('project_name', models.CharField(max_length=32, verbose_name='Project Name')),
                ('project_id', models.CharField(max_length=32, verbose_name='Project ID')),
                ('reference_link', models.URLField(verbose_name='Reference Link (Confluence)', default='http://10.100.8.185:8090')),
                ('neck_cpu', models.BooleanField(verbose_name='CPU Neck')),
                ('neck_io', models.BooleanField(verbose_name='IO Neck')),
                ('neck_memory', models.BooleanField(verbose_name='Memory Neck')),
                ('neck_net', models.BooleanField(verbose_name='Net Neck')),
                ('test_application', models.CharField(max_length=32, editable=False, default='Sirius-suit')),
                ('version', models.CharField(max_length=10, verbose_name='Application Version', default='0.1')),
                ('record_result_time', models.DateTimeField(verbose_name='Record Result Time', default=django.utils.timezone.now)),
                ('result_run_time', models.DecimalField(max_digits=12, verbose_name='Result - RUN_TIME', decimal_places=4)),
                ('result_passed', models.BooleanField(verbose_name='Result - PASSED')),
                ('result_warnings', models.BooleanField(verbose_name='Result - WARNINGS')),
                ('result_errors', models.BooleanField(verbose_name='Result - ERRORS')),
                ('app_name', models.CharField(max_length=256, verbose_name='app name')),
                ('pthread_num', models.PositiveSmallIntegerField(verbose_name='Pthread Number')),
                ('dataset_size', models.DecimalField(max_digits=12, verbose_name='Dataset Size (GB)', decimal_places=4)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SiriusSuitMachine',
            fields=[
                ('id', models.AutoField(auto_created=True, verbose_name='ID', primary_key=True, serialize=False)),
                ('machine_side', models.CharField(max_length=32, verbose_name='Server/Client', default='server_side', choices=[('server_side', 'As a Server'), ('client_side', 'As a Client')])),
                ('machine_name', models.CharField(max_length=32, verbose_name='Machine Name', default='Habonaro', choices=[('Habonaro', 'Habonaro'), ('Palmetto', 'Palmetto'), ('S812L', 'S812L'), ('S822L', 'S822L'), ('X86_E5', 'X86 E5 Series')])),
                ('cpu_type', models.CharField(max_length=16, verbose_name='CPU Type')),
                ('architecture_type', models.CharField(max_length=32, verbose_name='Architecture', default='powerpc', choices=[('x86', 'x86'), ('powerpc', 'powerpc'), ('arm64', 'arm64'), ('mips', 'mips')])),
                ('byte_order', models.CharField(max_length=32, verbose_name='Litter or Big endian', default='big_endian', choices=[('litter_endian', 'Litter Endian'), ('big_endian', 'Big Endian')])),
                ('l1_instruction', models.PositiveSmallIntegerField(verbose_name='L1 Instruction (KB)')),
                ('l1_data', models.PositiveSmallIntegerField(verbose_name='L1 Data (KB)')),
                ('l2', models.PositiveSmallIntegerField(verbose_name='L2 Cache (KB)')),
                ('l3', models.PositiveIntegerField(blank=True, verbose_name='L3 Cache (KB)', default=0)),
                ('l4', models.PositiveIntegerField(blank=True, verbose_name='L4 Cache (KB)', default=0)),
                ('memory', models.PositiveIntegerField(verbose_name='Memory (MB)')),
                ('os_type', models.CharField(max_length=64, verbose_name='Operation System')),
                ('kernel_version', models.CharField(max_length=64, verbose_name='Kernel Version')),
                ('dependence_information', models.TextField(max_length=1024, verbose_name='Dependency Instruction', blank=True)),
                ('last_modify_time', models.DateTimeField(verbose_name='Last Modified Time', auto_now=True)),
                ('cur_freq', models.DecimalField(max_digits=8, verbose_name='CUR_FREQ (GHZ)', decimal_places=4)),
                ('app_information', models.ForeignKey(verbose_name='Sirius-suit Information', to='performance.SiriusSuitInformation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SparkTerasortInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, verbose_name='ID', primary_key=True, serialize=False)),
                ('project_name', models.CharField(max_length=32, verbose_name='Project Name')),
                ('project_id', models.CharField(max_length=32, verbose_name='Project ID')),
                ('reference_link', models.URLField(verbose_name='Reference Link (Confluence)', default='http://10.100.8.185:8090')),
                ('neck_cpu', models.BooleanField(verbose_name='CPU Neck')),
                ('neck_io', models.BooleanField(verbose_name='IO Neck')),
                ('neck_memory', models.BooleanField(verbose_name='Memory Neck')),
                ('neck_net', models.BooleanField(verbose_name='Net Neck')),
                ('test_application', models.CharField(max_length=32, editable=False, default='Spark Terasort')),
                ('version', models.CharField(max_length=10, verbose_name='Application Version', default='0.1')),
                ('record_result_time', models.DateTimeField(verbose_name='Record Result Time', default=django.utils.timezone.now)),
                ('result_times', models.DecimalField(max_digits=12, verbose_name='Result - Time(s)', decimal_places=4)),
                ('data_size', models.DecimalField(max_digits=12, verbose_name='Data Size (GB)', decimal_places=4)),
                ('parition_size', models.PositiveSmallIntegerField(verbose_name='Partition Size')),
                ('processor_number', models.PositiveSmallIntegerField(verbose_name='Processor Number')),
                ('workers', models.PositiveIntegerField(verbose_name='Workers')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SparkTerasortMachine',
            fields=[
                ('id', models.AutoField(auto_created=True, verbose_name='ID', primary_key=True, serialize=False)),
                ('machine_side', models.CharField(max_length=32, verbose_name='Server/Client', default='server_side', choices=[('server_side', 'As a Server'), ('client_side', 'As a Client')])),
                ('machine_name', models.CharField(max_length=32, verbose_name='Machine Name', default='Habonaro', choices=[('Habonaro', 'Habonaro'), ('Palmetto', 'Palmetto'), ('S812L', 'S812L'), ('S822L', 'S822L'), ('X86_E5', 'X86 E5 Series')])),
                ('cpu_type', models.CharField(max_length=16, verbose_name='CPU Type')),
                ('architecture_type', models.CharField(max_length=32, verbose_name='Architecture', default='powerpc', choices=[('x86', 'x86'), ('powerpc', 'powerpc'), ('arm64', 'arm64'), ('mips', 'mips')])),
                ('byte_order', models.CharField(max_length=32, verbose_name='Litter or Big endian', default='big_endian', choices=[('litter_endian', 'Litter Endian'), ('big_endian', 'Big Endian')])),
                ('l1_instruction', models.PositiveSmallIntegerField(verbose_name='L1 Instruction (KB)')),
                ('l1_data', models.PositiveSmallIntegerField(verbose_name='L1 Data (KB)')),
                ('l2', models.PositiveSmallIntegerField(verbose_name='L2 Cache (KB)')),
                ('l3', models.PositiveIntegerField(blank=True, verbose_name='L3 Cache (KB)', default=0)),
                ('l4', models.PositiveIntegerField(blank=True, verbose_name='L4 Cache (KB)', default=0)),
                ('memory', models.PositiveIntegerField(verbose_name='Memory (MB)')),
                ('os_type', models.CharField(max_length=64, verbose_name='Operation System')),
                ('kernel_version', models.CharField(max_length=64, verbose_name='Kernel Version')),
                ('dependence_information', models.TextField(max_length=1024, verbose_name='Dependency Instruction', blank=True)),
                ('last_modify_time', models.DateTimeField(verbose_name='Last Modified Time', auto_now=True)),
                ('app_information', models.ForeignKey(verbose_name='SparkTerasort Information', to='performance.SparkTerasortInformation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpecCPUInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, verbose_name='ID', primary_key=True, serialize=False)),
                ('project_name', models.CharField(max_length=32, verbose_name='Project Name')),
                ('project_id', models.CharField(max_length=32, verbose_name='Project ID')),
                ('reference_link', models.URLField(verbose_name='Reference Link (Confluence)', default='http://10.100.8.185:8090')),
                ('neck_cpu', models.BooleanField(verbose_name='CPU Neck')),
                ('neck_io', models.BooleanField(verbose_name='IO Neck')),
                ('neck_memory', models.BooleanField(verbose_name='Memory Neck')),
                ('neck_net', models.BooleanField(verbose_name='Net Neck')),
                ('test_application', models.CharField(max_length=32, editable=False, default='SPEC CPU')),
                ('version', models.CharField(max_length=10, verbose_name='Application Version', default='0.1')),
                ('record_result_time', models.DateTimeField(verbose_name='Record Result Time', default=django.utils.timezone.now)),
                ('result_int_rate_ratio', models.DecimalField(max_digits=12, verbose_name="Result - INT Rate Ratio's", decimal_places=4)),
                ('result_fp_rate_ratio', models.DecimalField(max_digits=12, verbose_name="Result - FP Rate Ratio's", decimal_places=4)),
                ('benchmarks', models.CharField(max_length=256, verbose_name='Benchmarks')),
                ('copies', models.PositiveSmallIntegerField(verbose_name='Copies')),
                ('smt_number', models.PositiveSmallIntegerField(verbose_name='SMT')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpecCPUMachine',
            fields=[
                ('id', models.AutoField(auto_created=True, verbose_name='ID', primary_key=True, serialize=False)),
                ('machine_side', models.CharField(max_length=32, verbose_name='Server/Client', default='server_side', choices=[('server_side', 'As a Server'), ('client_side', 'As a Client')])),
                ('machine_name', models.CharField(max_length=32, verbose_name='Machine Name', default='Habonaro', choices=[('Habonaro', 'Habonaro'), ('Palmetto', 'Palmetto'), ('S812L', 'S812L'), ('S822L', 'S822L'), ('X86_E5', 'X86 E5 Series')])),
                ('cpu_type', models.CharField(max_length=16, verbose_name='CPU Type')),
                ('architecture_type', models.CharField(max_length=32, verbose_name='Architecture', default='powerpc', choices=[('x86', 'x86'), ('powerpc', 'powerpc'), ('arm64', 'arm64'), ('mips', 'mips')])),
                ('byte_order', models.CharField(max_length=32, verbose_name='Litter or Big endian', default='big_endian', choices=[('litter_endian', 'Litter Endian'), ('big_endian', 'Big Endian')])),
                ('l1_instruction', models.PositiveSmallIntegerField(verbose_name='L1 Instruction (KB)')),
                ('l1_data', models.PositiveSmallIntegerField(verbose_name='L1 Data (KB)')),
                ('l2', models.PositiveSmallIntegerField(verbose_name='L2 Cache (KB)')),
                ('l3', models.PositiveIntegerField(blank=True, verbose_name='L3 Cache (KB)', default=0)),
                ('l4', models.PositiveIntegerField(blank=True, verbose_name='L4 Cache (KB)', default=0)),
                ('memory', models.PositiveIntegerField(verbose_name='Memory (MB)')),
                ('os_type', models.CharField(max_length=64, verbose_name='Operation System')),
                ('kernel_version', models.CharField(max_length=64, verbose_name='Kernel Version')),
                ('dependence_information', models.TextField(max_length=1024, verbose_name='Dependency Instruction', blank=True)),
                ('last_modify_time', models.DateTimeField(verbose_name='Last Modified Time', auto_now=True)),
                ('threads_per_core', models.PositiveSmallIntegerField(verbose_name='Thread(s) Per Core')),
                ('cores_per_socket', models.PositiveSmallIntegerField(verbose_name='Core(s) Per Socket')),
                ('socket_number', models.PositiveSmallIntegerField(verbose_name='Socket(s)')),
                ('numa_nodes', models.PositiveSmallIntegerField(verbose_name='NUMA Node(s)')),
                ('cpu_number', models.PositiveSmallIntegerField(verbose_name='CPU(s)')),
                ('cpu_frequency', models.DecimalField(max_digits=8, verbose_name='CPU Clock Frequency (GHZ)', decimal_places=4)),
                ('app_information', models.ForeignKey(verbose_name='SPEC CPU Information', to='performance.SpecCPUInformation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpecjbbInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, verbose_name='ID', primary_key=True, serialize=False)),
                ('project_name', models.CharField(max_length=32, verbose_name='Project Name')),
                ('project_id', models.CharField(max_length=32, verbose_name='Project ID')),
                ('reference_link', models.URLField(verbose_name='Reference Link (Confluence)', default='http://10.100.8.185:8090')),
                ('neck_cpu', models.BooleanField(verbose_name='CPU Neck')),
                ('neck_io', models.BooleanField(verbose_name='IO Neck')),
                ('neck_memory', models.BooleanField(verbose_name='Memory Neck')),
                ('neck_net', models.BooleanField(verbose_name='Net Neck')),
                ('test_application', models.CharField(max_length=32, editable=False, default='Spec jbb')),
                ('version', models.CharField(max_length=10, verbose_name='Application Version', default='2005')),
                ('record_result_time', models.DateTimeField(verbose_name='Record Result Time', default=django.utils.timezone.now)),
                ('result_bops', models.DecimalField(max_digits=12, verbose_name='Result - bops', decimal_places=4)),
                ('jbb_attachment', models.FileField(blank=True, upload_to='%Y-%m-%d/%H-%M-%S')),
                ('app_name', models.CharField(max_length=256, verbose_name='app name')),
                ('processor_number', models.PositiveSmallIntegerField(verbose_name='Processor Number')),
                ('jvm_parameter', models.CharField(max_length=512, verbose_name='JVM Parameter')),
                ('jvm_instances', models.PositiveSmallIntegerField(verbose_name='JVM Instances')),
                ('warehouses', models.PositiveIntegerField(verbose_name='WAREHOUSES')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpecjbbMachine',
            fields=[
                ('id', models.AutoField(auto_created=True, verbose_name='ID', primary_key=True, serialize=False)),
                ('machine_side', models.CharField(max_length=32, verbose_name='Server/Client', default='server_side', choices=[('server_side', 'As a Server'), ('client_side', 'As a Client')])),
                ('machine_name', models.CharField(max_length=32, verbose_name='Machine Name', default='Habonaro', choices=[('Habonaro', 'Habonaro'), ('Palmetto', 'Palmetto'), ('S812L', 'S812L'), ('S822L', 'S822L'), ('X86_E5', 'X86 E5 Series')])),
                ('cpu_type', models.CharField(max_length=16, verbose_name='CPU Type')),
                ('architecture_type', models.CharField(max_length=32, verbose_name='Architecture', default='powerpc', choices=[('x86', 'x86'), ('powerpc', 'powerpc'), ('arm64', 'arm64'), ('mips', 'mips')])),
                ('byte_order', models.CharField(max_length=32, verbose_name='Litter or Big endian', default='big_endian', choices=[('litter_endian', 'Litter Endian'), ('big_endian', 'Big Endian')])),
                ('l1_instruction', models.PositiveSmallIntegerField(verbose_name='L1 Instruction (KB)')),
                ('l1_data', models.PositiveSmallIntegerField(verbose_name='L1 Data (KB)')),
                ('l2', models.PositiveSmallIntegerField(verbose_name='L2 Cache (KB)')),
                ('l3', models.PositiveIntegerField(blank=True, verbose_name='L3 Cache (KB)', default=0)),
                ('l4', models.PositiveIntegerField(blank=True, verbose_name='L4 Cache (KB)', default=0)),
                ('memory', models.PositiveIntegerField(verbose_name='Memory (MB)')),
                ('os_type', models.CharField(max_length=64, verbose_name='Operation System')),
                ('kernel_version', models.CharField(max_length=64, verbose_name='Kernel Version')),
                ('dependence_information', models.TextField(max_length=1024, verbose_name='Dependency Instruction', blank=True)),
                ('last_modify_time', models.DateTimeField(verbose_name='Last Modified Time', auto_now=True)),
                ('app_information', models.ForeignKey(verbose_name='Specjbb Information', to='performance.SpecjbbInformation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpecjvmInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, verbose_name='ID', primary_key=True, serialize=False)),
                ('project_name', models.CharField(max_length=32, verbose_name='Project Name')),
                ('project_id', models.CharField(max_length=32, verbose_name='Project ID')),
                ('reference_link', models.URLField(verbose_name='Reference Link (Confluence)', default='http://10.100.8.185:8090')),
                ('neck_cpu', models.BooleanField(verbose_name='CPU Neck')),
                ('neck_io', models.BooleanField(verbose_name='IO Neck')),
                ('neck_memory', models.BooleanField(verbose_name='Memory Neck')),
                ('neck_net', models.BooleanField(verbose_name='Net Neck')),
                ('test_application', models.CharField(max_length=32, editable=False, default='Spec jvm')),
                ('version', models.CharField(max_length=10, verbose_name='Application Version', default='2008')),
                ('record_result_time', models.DateTimeField(verbose_name='Record Result Time', default=django.utils.timezone.now)),
                ('result_bops', models.DecimalField(max_digits=12, verbose_name='Result - bops', decimal_places=4)),
                ('jvm_attachment', models.FileField(blank=True, upload_to='%Y-%m-%d/%H-%M-%S')),
                ('app_name', models.CharField(max_length=256, verbose_name='app name')),
                ('jvm_parameter', models.CharField(max_length=512, verbose_name='JVM Parameter')),
                ('specjvm_parameter', models.CharField(max_length=512, verbose_name='Spec JVM Parameter')),
                ('processor_number', models.PositiveSmallIntegerField(verbose_name='Processor Number')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpecjvmMachine',
            fields=[
                ('id', models.AutoField(auto_created=True, verbose_name='ID', primary_key=True, serialize=False)),
                ('machine_side', models.CharField(max_length=32, verbose_name='Server/Client', default='server_side', choices=[('server_side', 'As a Server'), ('client_side', 'As a Client')])),
                ('machine_name', models.CharField(max_length=32, verbose_name='Machine Name', default='Habonaro', choices=[('Habonaro', 'Habonaro'), ('Palmetto', 'Palmetto'), ('S812L', 'S812L'), ('S822L', 'S822L'), ('X86_E5', 'X86 E5 Series')])),
                ('cpu_type', models.CharField(max_length=16, verbose_name='CPU Type')),
                ('architecture_type', models.CharField(max_length=32, verbose_name='Architecture', default='powerpc', choices=[('x86', 'x86'), ('powerpc', 'powerpc'), ('arm64', 'arm64'), ('mips', 'mips')])),
                ('byte_order', models.CharField(max_length=32, verbose_name='Litter or Big endian', default='big_endian', choices=[('litter_endian', 'Litter Endian'), ('big_endian', 'Big Endian')])),
                ('l1_instruction', models.PositiveSmallIntegerField(verbose_name='L1 Instruction (KB)')),
                ('l1_data', models.PositiveSmallIntegerField(verbose_name='L1 Data (KB)')),
                ('l2', models.PositiveSmallIntegerField(verbose_name='L2 Cache (KB)')),
                ('l3', models.PositiveIntegerField(blank=True, verbose_name='L3 Cache (KB)', default=0)),
                ('l4', models.PositiveIntegerField(blank=True, verbose_name='L4 Cache (KB)', default=0)),
                ('memory', models.PositiveIntegerField(verbose_name='Memory (MB)')),
                ('os_type', models.CharField(max_length=64, verbose_name='Operation System')),
                ('kernel_version', models.CharField(max_length=64, verbose_name='Kernel Version')),
                ('dependence_information', models.TextField(max_length=1024, verbose_name='Dependency Instruction', blank=True)),
                ('last_modify_time', models.DateTimeField(verbose_name='Last Modified Time', auto_now=True)),
                ('app_information', models.ForeignKey(verbose_name='Specjvm Information', to='performance.SpecjvmInformation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SplashInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, verbose_name='ID', primary_key=True, serialize=False)),
                ('project_name', models.CharField(max_length=32, verbose_name='Project Name')),
                ('project_id', models.CharField(max_length=32, verbose_name='Project ID')),
                ('reference_link', models.URLField(verbose_name='Reference Link (Confluence)', default='http://10.100.8.185:8090')),
                ('neck_cpu', models.BooleanField(verbose_name='CPU Neck')),
                ('neck_io', models.BooleanField(verbose_name='IO Neck')),
                ('neck_memory', models.BooleanField(verbose_name='Memory Neck')),
                ('neck_net', models.BooleanField(verbose_name='Net Neck')),
                ('test_application', models.CharField(max_length=32, editable=False, default='Splash')),
                ('version', models.CharField(max_length=10, verbose_name='Application Version', default='2.0')),
                ('record_result_time', models.DateTimeField(verbose_name='Record Result Time', default=django.utils.timezone.now)),
                ('result_time', models.DecimalField(max_digits=12, verbose_name='Result - Time', decimal_places=4)),
                ('app_name', models.CharField(max_length=256, verbose_name='app name')),
                ('problem_size', models.CharField(max_length=256, verbose_name='Problem Size')),
                ('processor_number', models.PositiveSmallIntegerField(verbose_name='Processor Number')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SplashMachine',
            fields=[
                ('id', models.AutoField(auto_created=True, verbose_name='ID', primary_key=True, serialize=False)),
                ('machine_side', models.CharField(max_length=32, verbose_name='Server/Client', default='server_side', choices=[('server_side', 'As a Server'), ('client_side', 'As a Client')])),
                ('machine_name', models.CharField(max_length=32, verbose_name='Machine Name', default='Habonaro', choices=[('Habonaro', 'Habonaro'), ('Palmetto', 'Palmetto'), ('S812L', 'S812L'), ('S822L', 'S822L'), ('X86_E5', 'X86 E5 Series')])),
                ('cpu_type', models.CharField(max_length=16, verbose_name='CPU Type')),
                ('architecture_type', models.CharField(max_length=32, verbose_name='Architecture', default='powerpc', choices=[('x86', 'x86'), ('powerpc', 'powerpc'), ('arm64', 'arm64'), ('mips', 'mips')])),
                ('byte_order', models.CharField(max_length=32, verbose_name='Litter or Big endian', default='big_endian', choices=[('litter_endian', 'Litter Endian'), ('big_endian', 'Big Endian')])),
                ('l1_instruction', models.PositiveSmallIntegerField(verbose_name='L1 Instruction (KB)')),
                ('l1_data', models.PositiveSmallIntegerField(verbose_name='L1 Data (KB)')),
                ('l2', models.PositiveSmallIntegerField(verbose_name='L2 Cache (KB)')),
                ('l3', models.PositiveIntegerField(blank=True, verbose_name='L3 Cache (KB)', default=0)),
                ('l4', models.PositiveIntegerField(blank=True, verbose_name='L4 Cache (KB)', default=0)),
                ('memory', models.PositiveIntegerField(verbose_name='Memory (MB)')),
                ('os_type', models.CharField(max_length=64, verbose_name='Operation System')),
                ('kernel_version', models.CharField(max_length=64, verbose_name='Kernel Version')),
                ('dependence_information', models.TextField(max_length=1024, verbose_name='Dependency Instruction', blank=True)),
                ('last_modify_time', models.DateTimeField(verbose_name='Last Modified Time', auto_now=True)),
                ('app_information', models.ForeignKey(verbose_name='Splash Information', to='performance.SplashInformation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TpccInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, verbose_name='ID', primary_key=True, serialize=False)),
                ('project_name', models.CharField(max_length=32, verbose_name='Project Name')),
                ('project_id', models.CharField(max_length=32, verbose_name='Project ID')),
                ('reference_link', models.URLField(verbose_name='Reference Link (Confluence)', default='http://10.100.8.185:8090')),
                ('neck_cpu', models.BooleanField(verbose_name='CPU Neck')),
                ('neck_io', models.BooleanField(verbose_name='IO Neck')),
                ('neck_memory', models.BooleanField(verbose_name='Memory Neck')),
                ('neck_net', models.BooleanField(verbose_name='Net Neck')),
                ('test_application', models.CharField(max_length=32, editable=False, default='TPC-C')),
                ('version', models.CharField(max_length=10, verbose_name='Application Version', default='0.1')),
                ('record_result_time', models.DateTimeField(verbose_name='Record Result Time', default=django.utils.timezone.now)),
                ('result_tpmc', models.DecimalField(max_digits=12, verbose_name='Result - tpmC', decimal_places=4)),
                ('warehouses', models.PositiveIntegerField(verbose_name='WAREHOUSES')),
                ('terminals', models.PositiveSmallIntegerField(verbose_name='TERMINALS')),
                ('run_time', models.DecimalField(max_digits=12, verbose_name='RUN_TIME', decimal_places=4)),
                ('network_bandwidth', models.PositiveSmallIntegerField(verbose_name='Network Bandwidth (Mbps)')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TpccMachine',
            fields=[
                ('id', models.AutoField(auto_created=True, verbose_name='ID', primary_key=True, serialize=False)),
                ('machine_side', models.CharField(max_length=32, verbose_name='Server/Client', default='server_side', choices=[('server_side', 'As a Server'), ('client_side', 'As a Client')])),
                ('machine_name', models.CharField(max_length=32, verbose_name='Machine Name', default='Habonaro', choices=[('Habonaro', 'Habonaro'), ('Palmetto', 'Palmetto'), ('S812L', 'S812L'), ('S822L', 'S822L'), ('X86_E5', 'X86 E5 Series')])),
                ('cpu_type', models.CharField(max_length=16, verbose_name='CPU Type')),
                ('architecture_type', models.CharField(max_length=32, verbose_name='Architecture', default='powerpc', choices=[('x86', 'x86'), ('powerpc', 'powerpc'), ('arm64', 'arm64'), ('mips', 'mips')])),
                ('byte_order', models.CharField(max_length=32, verbose_name='Litter or Big endian', default='big_endian', choices=[('litter_endian', 'Litter Endian'), ('big_endian', 'Big Endian')])),
                ('l1_instruction', models.PositiveSmallIntegerField(verbose_name='L1 Instruction (KB)')),
                ('l1_data', models.PositiveSmallIntegerField(verbose_name='L1 Data (KB)')),
                ('l2', models.PositiveSmallIntegerField(verbose_name='L2 Cache (KB)')),
                ('l3', models.PositiveIntegerField(blank=True, verbose_name='L3 Cache (KB)', default=0)),
                ('l4', models.PositiveIntegerField(blank=True, verbose_name='L4 Cache (KB)', default=0)),
                ('memory', models.PositiveIntegerField(verbose_name='Memory (MB)')),
                ('os_type', models.CharField(max_length=64, verbose_name='Operation System')),
                ('kernel_version', models.CharField(max_length=64, verbose_name='Kernel Version')),
                ('dependence_information', models.TextField(max_length=1024, verbose_name='Dependency Instruction', blank=True)),
                ('last_modify_time', models.DateTimeField(verbose_name='Last Modified Time', auto_now=True)),
                ('app_information', models.ForeignKey(verbose_name='TPC-C Information', to='performance.TpccInformation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WebServingInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, verbose_name='ID', primary_key=True, serialize=False)),
                ('project_name', models.CharField(max_length=32, verbose_name='Project Name')),
                ('project_id', models.CharField(max_length=32, verbose_name='Project ID')),
                ('reference_link', models.URLField(verbose_name='Reference Link (Confluence)', default='http://10.100.8.185:8090')),
                ('neck_cpu', models.BooleanField(verbose_name='CPU Neck')),
                ('neck_io', models.BooleanField(verbose_name='IO Neck')),
                ('neck_memory', models.BooleanField(verbose_name='Memory Neck')),
                ('neck_net', models.BooleanField(verbose_name='Net Neck')),
                ('test_application', models.CharField(max_length=32, editable=False, default='WebServing')),
                ('version', models.CharField(max_length=10, verbose_name='Application Version', default='0.1')),
                ('record_result_time', models.DateTimeField(verbose_name='Record Result Time', default=django.utils.timezone.now)),
                ('result_ops', models.DecimalField(max_digits=12, verbose_name='Result - OPS', decimal_places=4)),
                ('result_passed', models.BooleanField(verbose_name='Result - PASSED')),
                ('result_warnings', models.BooleanField(verbose_name='Result - WARNINGS')),
                ('result_errors', models.BooleanField(verbose_name='Result - ERRORS')),
                ('warm_up', models.PositiveSmallIntegerField(verbose_name='Warm Up')),
                ('con_users', models.PositiveSmallIntegerField(verbose_name='CON Users')),
                ('pm_static', models.BooleanField(verbose_name='PM Staic')),
                ('pm_max_connections', models.PositiveSmallIntegerField(verbose_name='PM Max Connections')),
                ('sql_max_connections', models.PositiveSmallIntegerField(verbose_name='SQL Max Connections')),
                ('worker_processes', models.PositiveSmallIntegerField(verbose_name='Worker Processes')),
                ('worker_connection', models.PositiveSmallIntegerField(verbose_name='Worker Connection')),
                ('network_bandwidth', models.PositiveSmallIntegerField(verbose_name='Network Bandwidth (Mbps)')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WebServingMachine',
            fields=[
                ('id', models.AutoField(auto_created=True, verbose_name='ID', primary_key=True, serialize=False)),
                ('os_type', models.CharField(max_length=64, verbose_name='Operation System')),
                ('kernel_version', models.CharField(max_length=64, verbose_name='Kernel Version')),
                ('dependence_information', models.TextField(max_length=1024, verbose_name='Dependency Instruction', blank=True)),
                ('machine_side', models.CharField(max_length=32, verbose_name='Machine Role', default='client_side', choices=[('frontend', 'As a Frontend'), ('backend', 'As a Backend'), ('client_side', 'As a Client')])),
                ('machine_name', models.CharField(max_length=32, verbose_name='Machine Name', default='Habonaro', choices=[('Habonaro', 'Habonaro'), ('Palmetto', 'Palmetto'), ('S812L', 'S812L'), ('S822L', 'S822L'), ('X86_E5', 'X86 E5 Series')])),
                ('cpu_type', models.CharField(max_length=16, verbose_name='CPU Type')),
                ('architecture_type', models.CharField(max_length=32, verbose_name='Architecture', default='powerpc', choices=[('x86', 'x86'), ('powerpc', 'powerpc'), ('arm64', 'arm64'), ('mips', 'mips')])),
                ('byte_order', models.CharField(max_length=32, verbose_name='Litter or Big endian', default='big_endian', choices=[('litter_endian', 'Litter Endian'), ('big_endian', 'Big Endian')])),
                ('l1_instruction', models.PositiveSmallIntegerField(verbose_name='L1 Instruction (KB)')),
                ('l1_data', models.PositiveSmallIntegerField(verbose_name='L1 Data (KB)')),
                ('l2', models.PositiveSmallIntegerField(verbose_name='L2 Cache (KB)')),
                ('l3', models.PositiveIntegerField(blank=True, verbose_name='L3 Cache (KB)', default=0)),
                ('half_l3', models.BooleanField(verbose_name='Half L3 Cache')),
                ('l4', models.PositiveIntegerField(blank=True, verbose_name='L4 Cache (KB)', default=0)),
                ('memory', models.PositiveIntegerField(verbose_name='Memory (MB)')),
                ('last_modify_time', models.DateTimeField(verbose_name='Last Modified Time', auto_now=True)),
                ('app_information', models.ForeignKey(verbose_name='WebServing Information', to='performance.WebServingInformation')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
